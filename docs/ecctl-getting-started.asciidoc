[id="{p}-overview"]
== Overview

beta[]

{p} is the CLI for the Elastic Cloud Enterprise API. 
It wraps typical operations commonly needed by operators within a single command line tool.

Benefits of {p}:

* Easier to use than the Cloud UI or using the RESTful API directly
* Helps you automate the deployment lifecycle
* Provides a foundation for integration with other tools

[id="{p}-installing"]
== Installing

The latest stable binaries can be found on the
https://github.com/elastic/ecctl/releases[release page] or compiled from
the latest on the master branch to leverage the most recently merged
features. 

To learn more about building {p} from the source, see
the steps from our link:https://github.com/elastic/ecctl/blob/master/CONTRIBUTING.md#setting-up-a-dev-environment[Setting up a dev environment].

[float]
[id="{p}-installing-macos"]
=== Install on macOS

The simplest installation for macOS users is to install {p} with
link:https://brew.sh/[Homebrew]:

[source]
----
$ brew tap elastic/tap
$ brew install elastic/tap/ecctl

Updating Homebrew...
=> Installing ecctl from elastic/ecctl
...
=> Summary
üç∫  /usr/local/Cellar/ecctl/1.0.0: 6 files, 13MB, built in 7 seconds
----

NOTE: To get autocompletions working make sure to run `source <(ecctl generate completions)`. If you prefer to add to your shell interpreter configuration file run `echo "source <(ecctl generate completions)" >> ~/.bash_profile` or `echo "source <(ecctl generate completions)" >> ~/.zshrc`.

[float]
[id="{p}-upgrading-macos"]
=== Upgrade on macOS

To upgrade {p} via brew:

[source]
----
$ brew upgrade ecctl

----

////
[float]
[id="{p}-installing-linux"]
== Install on Linux

// NR TO DO with info from https://github.com/elastic/cloud-cli#linux-based-os
 
The simplest installation for Linux-based users is to install ecl with apt-get. We are hosting ecl binaries in a temporary apt repository so you need to do the following:

[source,console]
----
$ echo "deb [trusted=yes] https://s3.us-east-2.amazonaws.com/cloud-soteria-apt-repo stable main" >> etc/apt/sources.list.d/myrepo.list
$ apt-get install ece-ctl -y
The following NEW packages will be installed:
  ece-ctl
0 upgraded, 1 newly installed, 0 to remove and 16 not upgraded.
Need to get 4379 kB of archives.
After this operation, 13.8 MB of additional disk space will be used.
Get:1 https://s3.us-east-2.amazonaws.com/cloud-soteria-apt-repo/ stable/main ece-ctl amd64 0.12.0 [4379 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 4379 kB in 4s (1052 kB/s)
dpkg: warning: parsing file '/var/lib/dpkg/tmp.ci/control' near line 11 package 'ece-ctl':
 missing maintainer
Selecting previously unselected package ece-ctl.
(Reading database ... 7965 files and directories currently installed.)
Preparing to unpack .../ece-ctl_0.12.0_amd64.deb ...
Unpacking ece-ctl (0.12.0) ...
dpkg: warning: parsing file '/var/lib/dpkg/status' near line 1607 package 'ece-ctl':
 missing maintainer
Setting up ece-ctl (0.12.0) ...
dpkg: warning: parsing file '/var/lib/dpkg/status' near line 1607 package 'ece-ctl':
 missing maintainer
----
 
////

[id="{p}-configuring"]
== Configuring

In order for {p} to be able to communicate with the RESTful API, it needs
to have a set of configuration parameters defined.
These parameters can be set in a configuration file, through environment
variables, or at runtime using the CLI‚Äôs global flags.

[float]
=== Before you begin
The hierarchy for configuration parameters is as follows, from higher precedence to lower:

. Command line flags `--host`, `--user`, `--pass`
. Environment variables
. Shared configuration file
`$HOME/.ecctl/config.<json|toml|yaml|hcl>`

[float]
== Generate a configuration file

If it‚Äôs your first time using {p}, use the `init` command to assist you in generating a configuration file. The resulting configuration file will be saved under `~/.ecctl/config.json`:

[source]
----
$ ecctl init
Welcome to the Elastic Cloud CLI! This command will guide you through authenticating and setting some default values.

Missing configuration file, would you like to initialise it? [y/n]: y

Select which type of Elastic Cloud offering will you be working with:
  [1] Elasticsearch Service (default).
  [2] Elastic Cloud Enterprise (ECE).
  [3] Elasticsearch Service Private (ESSP).

Please enter your choice: 1

Using "https://api.elastic-cloud.com" as the API endpoint.

Paste your API Key and press enter: xxxxx

What default output format would you like?
  [1] text - Human-readable output format, commands with no output templates defined will fall back to JSON.
  [2] json - JSON formatted output API responses.

Please enter a choice: 1

Your credentials seem to be valid, and show you're authenticated as "user".

You're all set! Here is a command to try:
  $ ecctl deployment list
----

[id="{p}-authentication"]
=== Authentication

Elastic Cloud uses API keys to authenticate users against its API.
Additionally, it supports the usage of https://jwt.io/[JWT] to validate
authenticated clients. The preferred authentication method is API keys.

There are two ways to authenticate against the Elasticsearch Service or the Elastic Cloud Enterprise APIs
{p}:

* By specifying an API key using the `--apikey` flag
* By specifying the `--user` and `--pass` flags

The first method requires the user to already have an API key, if this
is the case, all the outgoing API requests will use an Authentication
API key header.

The second method uses the `user` and `pass` values to obtain a
valid JWT token, that token is then used as the Authentication
Bearer¬†header for every API call. A goroutine that refreshes the token
every minute is started, so that the token doesn‚Äôt expire while we‚Äôre
performing actions.

[id="{p}-example-shared-configuration-file"]
=== Example: A shared configuration file

Below is an example `YAML` configuration file
`$HOME/.ecctl/config.yaml` that will effectively point and configure
the binary for Elastic Cloud:

[source,yaml]
----
host: https://api.elastic-cloud.com # URL of your Elasticsearch Service or Elastic Cloud Enterprise API endpoint

# Credentials
## apikey is the preferred authentication mechanism.
apikey: bWFyYzo4ZTJmNmZkNjY5ZmQ0MDBkOTQ3ZjI3MTg3ZWI5MWZhYjpOQktHY05jclE0cTBzcUlnTXg3QTd3

##¬†username and password can be used when no API key is available.
user: username
pass: password
----

[id="{p}-environment-variables"]
=== Environment variables

The same settings can be defined as environment variables instead of a
configuration file or to override certain settings of the `YAML` file.
If setting environment variables, you‚Äôll need to prefix the
configuration parameter with `EC_` and capitalize the setting,
i.e.¬†`EC_HOST` or `EC_USER`.

[source,sh]
----
export EC_APIKEY=bWFyYzo4ZTJmNmZkNjY5ZmQ0MDBkOTQ3ZjI3MTg3ZWI5MWZhYjpOQktHY05jclE0cTBzcUlnTXg3QTd3
----

[float]
[id="{p}-special-environment-variables"]
==== Special Environment Variables

[source,sh]
----
export EC_CONFIG=$HOME/.ecctl/cloud.yaml
----

[id="{p}-multiple-configuration-files"]
=== Multiple configuration files

{p} supports having multiple configuration files out of the box.
This allows for easy management of multiple environments or specialized
targets. By default it will use
`$HOME/.ecctl/config.<json|toml|yaml|hcl>`, but when the `--config`
flag is specified, it will append the `--config` name to the file:

[source]
----
# Default behaviour
$ ecctl version
# will use ~/.ecctl/config.yaml

# When an environment is specified, the configuration file used will change
$ ecctl version --config ece
# will use ~/.ecctl/ece.yaml
----

[id="{p}-output-format"]
=== Output format

The `--output` flag allows for the response to be presented in a
particular way (see `ecctl help` for an updated list of allowed
formats). The default formatter behavior is to fallback to `json` when
there‚Äôs no _text_ format template or if the formatting fails.

[id="{p}-custom-formatting"]
=== Custom formatting

{p} supports a global `--format` flag which can be passed to any
existing command or subcommand. Using the `--format` flag allows you
to obtain a specific part of a command response that might not have been
shown before with the default `--output=text`. The `--format`
internally uses Go templates which means that you can use the power of
the Go built-in
https://golang.org/pkg/text/template/[`text/templates`] on demand.

[id="{p}-examples"]
== Usage examples

Once you've <<{p}-installing,installed>> and <<{p}-configuring,configured>> {p} you're ready to take it for a test drive. Here are some examples for you to try, demonstrating basic Create, Read, Update and Delete operations using {p}:

* <<{p}-example-list-deployments,A first {p} command: What deployments are there?>>
* <<{p}-example-create-deployment,Create a deployment>>



If you would like to compare the {p} commands against their API equivalents, see the {cloud}/ec-api-examples.html[API examples].



[id="{p}-example-list-deployments"]
=== A First {p} command: What deployments are there?

As a first example, let's use the <<ecctl_deployment_list,{p} deployment list>> command to retrieve information about existing deployments. If you have any deployments already created, they'll be listed in the results.

[source, sh]
--
ecctl deployment list
--

[source, sh]
--
ID                                 NAME            ELASTICSEARCH                      KIBANA                             APM                                APPSEARCH
00be03849b6a49c1a6541e3ccb5958d2   marvin          00be03849b6a49c1a6541e3ccb5958d2   266e456acf257588a9cde6fb4569d4a0   78c096c22e12408b878083b2d5ff6bcf   -
147cdeace6404c3e4b5018e1401647e4   biggerdata      147cdeace6404c3e4b5018e1401647e4   443a9df7b33952f45921c5823cbad4bc   4678ce52d45547e463455ede663cb4a4   -
--

[id="{p}-example-create-deployment"]
=== Create a deployment

Let's create a basic deployment. Elasticsearch Service supports {cloud}/ec-getting-started-templates.html[deployment templates], which pre-configure the Elastic Stack components in your deployment to best suit your particular use case. For this example, we'll use Google Cloud Platform (GCP) to host the deployment in region `US Central 1 (Iowa)`. For a full list of regions available on each platform, see {cloud}/ec-reference-regions.html[Elasticsearch Service regions].

Copy the following JSON payload and save it as file `create-deployment.json`.

[source, json]
--
{
  "name": "My first ecctl deployment",
  "resources": {
    "elasticsearch": [
      {
        "region": "gcp-us-central1",
        "ref_id": "main-elasticsearch",
        "plan": {
          "cluster_topology": [
            {
              "node_type": {
                "master": true,
                "data": true,
                "ingest": true
              },
              "instance_configuration_id": "gcp.data.highio.1",
              "zone_count": 2,
              "size": {
                "resource": "memory",
                "value": 2048
              }
            }
          ],
          "elasticsearch": {
            "version": "7.6.0"
          },
          "deployment_template": {
            "id": "gcp-io-optimized"
          }
        }
      }
    ],
    "kibana": [
      {
        "region": "gcp-us-central1",
        "elasticsearch_cluster_ref_id": "main-elasticsearch",
        "ref_id": "main-kibana",
        "plan": {
          "cluster_topology": [
            {
              "instance_configuration_id": "gcp.kibana.1",
              "zone_count": 1,
              "size": {
                "resource": "memory",
                "value": 1024
              }
            }
          ],
          "kibana": {
            "version": "7.6.0"
          }
        }
      }
    ],
    "apm": [
      {
        "region": "gcp-us-central1",
        "elasticsearch_cluster_ref_id": "main-elasticsearch",
        "ref_id": "main-apm",
        "plan": {
          "cluster_topology": [
            {
              "instance_configuration_id": "gcp.apm.1",
              "zone_count": 1,
              "size": {
                "resource": "memory",
                "value": 512
              }
            }
          ],
          "apm": {
            "version": "7.6.0"
          }
        }
      }
    ]
  }
}
--


This JSON contains the settings for a highly available Elasticsearch cluster deployed across two availability zones, a single instance of Kibana, and a single APM server.

Run the <<ecctl_deployment_create,{p} deployment create>> command with `create-deployment.json` as a parameter. For this and other commands, you can add an optional `--track` parameter to monitor the progress.

[source, sh]
--
ecctl deployment create -f create-deployment.json
--

[source, sh]
--
{
  "created": true,
  "id": "7229888e7bf8350c7e4d07d7374171c0",
  "name": "My first ecctl deployment",
  "resources": [
    {
      "cloud_id": "My_first_ecctl_deployment:dXMtY2VudHJhbDEuZ2NwLmZvdW5kaXQubm8kYjFlZWVjOGQ0YWVlNGY3ZDgxNTM2Zjc1ZjZhN2Y1MDgkM2ViZTAzNmI0NDhkNDc3Y2E2ZTJjZTQ5NmE4ZDQ5ODA=",
      "credentials": {
        "password": "qIJuMbL8BFfgoNq5bpjQhDRC",
        "username": "elastic"
      },
      "id": "b1eeec8d4aee4f7d81536f75f6a7f508",
      "kind": "elasticsearch",
      "ref_id": "main-elasticsearch",
      "region": "gcp-us-central1"
    },
    {
      "elasticsearch_cluster_ref_id": "main-elasticsearch",
      "id": "3ebe036b448d477ca6e2ce496a8d4980",
      "kind": "kibana",
      "ref_id": "main-kibana",
      "region": "gcp-us-central1"
    },
    {
      "elasticsearch_cluster_ref_id": "main-elasticsearch",
      "id": "5a03472f6dfe4f17acbe62622823b9cb",
      "kind": "apm",
      "ref_id": "main-apm",
      "region": "gcp-us-central1",
      "secret_token": "zfufcfe15eCVJk78b5"
    }
  ]
}
--

The response indicates that the request was submitted successfully. It includes the `elastic` user password, which you can use to log in to Kibana or to access the Elasticsearch REST API. Make a note of the deployment ID, which we will use in the next step.


////
To create your first deployment, use the `ecctl deployment create` command, which accepts https://github.com/elastic/ecctl/blob/master/docs/ecctl_deployment_create.md#examples[a deployment description in the form of a JSON file] and a stack version and name as inputs.

[source,sh]
--
ecctl deployment create --file ./deployment.json --name=my-new-deployment --version=7.4.1
{
  "created": true,
  "id": "c44ad3fa558a237d0c17d0f4273801df",
  "name": "my example cluster",
  "resources": [
    {
      "cloud_id": "my_elasticsearch_cluster:REDACTED",
      "credentials": {
        "password": "REDACTED",
        "username": "elastic"
      },
      "id": "edd8b0bf7ece46dab47acc7074a7f191",
      "kind": "elasticsearch",
      "ref_id": "my-es-cluster",
      "region": "ece-region"
    },
    {
      "elasticsearch_cluster_ref_id": "my-es-cluster",
      "id": "44dd3575894b4fc89bd600f56d1c130d",
      "kind": "kibana",
      "ref_id": "my-kibana-instance",
      "region": "ece-region"
    },
    {
      "elasticsearch_cluster_ref_id": "my-es-cluster",
      "id": "9868cd370bdc469a8364ece4fe0db16d",
      "kind": "apm",
      "ref_id": "my-apm-instance",
      "region": "ece-region",
      "secret_token": "REDACTED"
    }
  ]
}
--

There‚Äôs much more you can use ecctl for. You can  explore ecctl and its various commands by issuing `ecctl <command> <help>` to see the different options that we support. 

////

// NR as per Omer, ecctl elasticsearch is no longer supported (do we need to mention this in the release notes for beta1?)
////
Obtaining the ID, Version and health status

[source]
----
$ ecctl elasticsearch list --format '{{.ClusterID}} {{.PlanInfo.Current.Plan.Elasticsearch.Version}} {{.Healthy}}'
a2c4f423c1014941b75a48292264dd25 6.7.0 true
a4f29ff3ba554e69a1e1b40c3ee1b6e3 6.7.0 true
5e29960763ef496ea8cf6a5371328a6a 6.7.0 true
53023f28d68b4b329d9d913f110709d2 6.7.0 true
----

Since the template is executed we can also embed logic inside of the
template to filter the results.

[source]
----
$ export EC_FORMAT='{{range .Elasticsearch.DefaultPlugins}}{{if eq . "discovery-file" }}{{$.Version}}{{end}}{{end}}'
# Since the template is executed on every item of the list, filter the empty lines to have a cleaner output.
$ ecctl stack list --format "${EC_FORMAT}" | sed '/^\s*$/d'


6.2.3
$ unset EC_FORMAT
----
////

[id="{p}-command-reference"]
== Command reference

{n} includes commands to administer:

* Elastic Stack deployments
* Platform components
* And more

:leveloffset: +1 
include::ecctl-command-reference-index.adoc[]
:leveloffset: 0

[id="{p}-contributing"]
== Contributing

If you are interested in becoming a part of this project, take a look at link:https://github.com/elastic/ecctl/blob/master/CONTRIBUTING.md[Contributing to ecctl].

////
[id="{p}-release-process"]
== Release Process

See the link:https://github.com/elastic/ecctl/blob/master/developer_docs/RELEASE.md[release guide].
////
