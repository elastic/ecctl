[id="{p}-overview"]
== Overview

{p} is the CLI on steroids for the Elastic Cloud API. It wraps
common operations commonly needed by Elastic Cloud operators within a
single command line tool.

Benfits of {p}:

* Easier to use for ops than using the Cloud UI or using the RESTful API directly
* Help you automate the deployment lifecycle
* Provides a foundation for integration with other tools, such as Terraform and Ansible

[id="{p}-installing"]
== Installing

The latest stable binaries can be found on the
https://github.com/elastic/ecctl/releases[release page] or compiled from
the latest on the master branch to leverage the most recently merged
features. 

To learn more about building {p} from the source, see
the steps from our link:https://github.com/elastic/ecctl/blob/master/CONTRIBUTING.md#setting-up-a-dev-environment[Setting up a dev environment].

[float]
[id="{p}-installing-macos"]
=== Install on macOS

The simplest installation for macOS users is to install {p} with
link:https://brew.sh/[Homebrew]:

[source,console]
----
$ brew tap elastic/ecctl
$ brew tap-pin elastic/ecctl
$ brew install elastic/ecctl/ecctl
Updating Homebrew...
=> Installing ecctl from elastic/ecctl
...
[id="{p}-"]
=> Summary
🍺  /usr/local/Cellar/ecctl/1.0.0: 6 files, 13MB, built in 7 seconds
----

NOTE: To get autocompletions working, they must be sourced from your shell profile.

////
[float]
[id="{p}-installing-linux"]
== Install on Linux

// NR TO DO with info from https://github.com/elastic/cloud-cli#linux-based-os
 
The simplest installation for Linux-based users is to install ecl with apt-get. We are hosting ecl binaries in a temporary apt repository so you need to do the following:

[source,console]
----
$ echo "deb [trusted=yes] https://s3.us-east-2.amazonaws.com/cloud-soteria-apt-repo stable main" >> etc/apt/sources.list.d/myrepo.list
$ apt-get install ece-ctl -y
The following NEW packages will be installed:
  ece-ctl
0 upgraded, 1 newly installed, 0 to remove and 16 not upgraded.
Need to get 4379 kB of archives.
After this operation, 13.8 MB of additional disk space will be used.
Get:1 https://s3.us-east-2.amazonaws.com/cloud-soteria-apt-repo/ stable/main ece-ctl amd64 0.12.0 [4379 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 4379 kB in 4s (1052 kB/s)
dpkg: warning: parsing file '/var/lib/dpkg/tmp.ci/control' near line 11 package 'ece-ctl':
 missing maintainer
Selecting previously unselected package ece-ctl.
(Reading database ... 7965 files and directories currently installed.)
Preparing to unpack .../ece-ctl_0.12.0_amd64.deb ...
Unpacking ece-ctl (0.12.0) ...
dpkg: warning: parsing file '/var/lib/dpkg/status' near line 1607 package 'ece-ctl':
 missing maintainer
Setting up ece-ctl (0.12.0) ...
dpkg: warning: parsing file '/var/lib/dpkg/status' near line 1607 package 'ece-ctl':
 missing maintainer
----
 
////

[id="{p}-configuring"]
== Configuring

In order for {p} to be able to communicate with the RESTful API, it needs
to have a set of configuration parameters defined.
These parameters can be set in a configuration file, through environment
variables, or at runtime using the CLI’s global flags.

[float]
=== Before you begin
The hierarchy for configuration parameters is as follows, from higher precedence to lower:

. Command line flags `--region`, `--host`, `--user`, `--pass`
. Environment variables
. Shared configuration file
`$HOME/.ecctl/config.<json|toml|yaml|hcl>`

[float]
== Generate a configuration file

If it’s your first time using {p}, use the `init` command to assist you in generating a configuration file. The resulting configuration file will be saved under `~/.ecctl/config.json`:

[source,console]
----
$ ecctl init
Welcome to the Elastic Cloud CLI! This command will guide you through authenticating and setting some default values.

Missing configuration file, woud you like to initialise it? [y/n]: y
Enter the URL of the Elastic Cloud API or your ECE installation: https://api.elastic-cloud.com

What default output format would you like?
  [1] text - Human-readable output format, commands with no output templates defined will fall back to JSON.
  [2] json - JSON formatted output API responses.

Please enter a choice: 1


Which authentication mechanism would you like to use?
  [1] API Keys (Recommended).
  [2] Username and Password login.

Please enter your choice: 1

Paste your API Key and press enter: xxxxx

Your credentials seem to be valid, and show you're authenticated as "user".

You're all set! Here are some commands to try:
  $ ecctl auth user key list
  $ ecctl deployment elasticsearch list
----

[id="{p}-authentication"]
=== Authentication

Elastic Cloud uses API keys to authenticate users against its API.
Additionally, it supports the usage of https://jwt.io/[JWT] to validate
authenticated clients. The preferred authentication method is API keys.

There are two ways to authenticate against the Elastic Cloud API using
{p}:

* By specifying an API key using the `--apikey` flag
* By specifying the `--user` and `--pass` flags

The first method requires the user to already have an API key, if this
is the case, all the outgoing API requests will use an Authentication
API key header.

The second method uses the `user` and `pass` values to obtain a
valid JWT token, that token is then used as the Authentication
Bearer header for every API call. A goroutine that refreshes the token
every minute is started, so that the token doesn’t expire while we’re
performing actions.

[id="{p}-example-shared-configuration-file"]
=== Example: A shared configuration file

Below is an example `YAML` configuration file
`$HOME/.ecctl/config.yaml` that will effectively point and configure
the binary for Elastic Cloud:

[source,yaml]
----
host: https://api.elastic-cloud.com # URL of Elastic Cloud or your ECE installation.
region: us-east-1 # For ECE installations you can just omit this setting.

# Credentials
## apikey is the preferred authentication mechanism.
apikey: bWFyYzo4ZTJmNmZkNjY5ZmQ0MDBkOTQ3ZjI3MTg3ZWI5MWZhYjpOQktHY05jclE0cTBzcUlnTXg3QTd3

## username and password can be used, specially when no API key is available.
user: username
pass: password
----

[id="{p}-environment-variables"]
=== Environment variables

The same settings can be defined as environment variables instead of a
configuration file or to override certain settings of the `YAML` file.
If setting environment variables, you’ll need to prefix the
configuration parameter with `EC_` and capitalize the setting,
i.e. `EC_HOST` or `EC_USER`.

[source,sh]
----
export EC_APIKEY=bWFyYzo4ZTJmNmZkNjY5ZmQ0MDBkOTQ3ZjI3MTg3ZWI5MWZhYjpOQktHY05jclE0cTBzcUlnTXg3QTd3
----

[float]
[id="{p}-special-environment-variables"]
==== Special Environment Variables

[source,sh]
----
export EC_CONFIG=$HOME/.ecctl/cloud.yaml
----

`EC_REGIONS` will define autocomplete entries for the `--region`
flag, though there is no validation and it is not environment aware
(e.g. no different list is provided for staging vs production).

[source,sh]
----
export EC_REGIONS=="ap-northeast-1 ap-southeast-1 ap-southeast-2 aws-eu-central-1 eu-west-1 gcp-europe-west1 gcp-europe-west3 gcp-us-central1 gcp-us-west1 sa-east-1 us-east-1 us-west-1 us-west-2"
----

[id="{p}-multiple-configuration-files"]
=== Multiple configuration files

{p} supports having multiple configuration files out of the box.
This allows for easy management of multiple environments or specialized
targets. By default it will use
`$HOME/.ecctl/config.<json|toml|yaml|hcl>`, but when the `--config`
flag is specified, it will append the `--config` name to the file:

[source,console]
----
# Default behaviour
$ ecctl version
# will use ~/.ecctl/staging.yaml

# When an environment is specified, the configuration file used will change
$ ecctl version --config ece
# will use ~/.ecctl/ece.yaml
----

[id="{p}-output-format"]
=== Output format

The `--output` flag allows for the response to be presented in a
particular way (see `ecctl help` for an updated list of allowed
formats). The default formatter behavior is to fallback to `json` when
there’s no _text_ format template or if the formatting fails.

[id="{p}-custom-formatting"]
=== Custom formatting

{p} supports a global `--format` flag which can be passed to any
existing command or subcommand. Using the `--format` flag allows you
to obtain a specific part of a command response that might not have been
shown before with the default `--output=text`. The `--format`
internally uses Go templates which means that you can use the power of
the Go built-in
https://golang.org/pkg/text/template/[`text/templates`] on demmand.

[id="{p}-examples"]
== Usage examples

Obtaining the ID, Version and health status

[source,console]
----
$ ecctl elasticsearch list --format '{{.ClusterID}} {{.PlanInfo.Current.Plan.Elasticsearch.Version}} {{.Healthy}}'
a2c4f423c1014941b75a48292264dd25 6.7.0 true
a4f29ff3ba554e69a1e1b40c3ee1b6e3 6.7.0 true
5e29960763ef496ea8cf6a5371328a6a 6.7.0 true
53023f28d68b4b329d9d913f110709d2 6.7.0 true
----

Since the template is executed we can also embed logic inside of the
template to filter the results.

[source,console]
----
$ export EC_FORMAT='{{range .Elasticsearch.DefaultPlugins}}{{if eq . "discovery-file" }}{{$.Version}}{{end}}{{end}}'
# Since the template is executed on every item of the list, filter the empty lines to have a cleaner output.
$ ecctl stack list --format "${EC_FORMAT}" | sed '/^\s*$/d'


6.2.3
$ unset EC_FORMAT
----

[id="{p}-command-reference"]
== Command reference

See link:https://github.com/elastic/ecctl/blob/master/docs/ecctl.md[ecctl command reference].

[id="{p}-contributing"]
== Contributing

If you are interested in becoming a part of this project, take a look at link:https://github.com/elastic/ecctl/blob/master/CONTRIBUTING.md[Contributing to ecctl].

////
[id="{p}-release-process"]
== Release Process

See the link:https://github.com/elastic/ecctl/blob/master/developer_docs/RELEASE.md[release guide].
////