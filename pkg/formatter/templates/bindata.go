// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Package templates Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// bindata.go
// text/allocator/list.gotmpl
// text/allocator/listmetadata.gotmpl
// text/allocator/show.gotmpl
// text/allocator/showmetadata.gotmpl
// text/apm/list.gotmpl
// text/apm/planhistory.gotmpl
// text/deployment/list.gotmpl
// text/deployment/notelist.gotmpl
// text/deployment/search.gotmpl
// text/deployment-template/list.gotmpl
// text/elasticsearch/list.gotmpl
// text/elasticsearch/overridecapacity.gotmpl
// text/elasticsearch/planhistory.gotmpl
// text/filtered-group/list.gotmpl
// text/instance-configuration/create.gotmpl
// text/instance-configuration/list.gotmpl
// text/kibana/enable.gotmpl
// text/kibana/list.gotmpl
// text/metadata/show.gotmpl
// text/platform/repositorylist.gotmpl
// text/proxy/list.gotmpl
// text/roles/list.gotmpl
// text/runner/list.gotmpl
// text/stack/list.gotmpl
// text/token/create.gotmpl
// text/token/list.gotmpl
// text/user/key-details.gotmpl
// text/user/keys-details.gotmpl
// text/user/list.gotmpl
// text/user/user-details.gotmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textAllocatorListGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x6f\xb3\x30\x0c\x86\xef\xfd\x15\x16\xea\xb5\xe8\x3b\x7f\xd2\x0e\x2c\x65\x6a\xa4\x02\x55\xc9\x0e\xeb\x2d\x05\x33\x21\xd1\xa4\x4a\xcc\xd4\x0a\xf1\xdf\x27\x52\x56\x5a\xb2\xdd\xa2\xf7\xb5\xfd\x38\xb6\xbb\x6e\x05\x25\x56\xb5\x42\x08\xf4\x17\x1a\x53\x97\x18\x40\xdf\x77\x1d\x18\xa9\x3e\x11\xc2\x83\x56\x68\x9f\x94\xa8\x69\x74\x21\x49\x9b\x51\xc6\x0b\x16\x2d\xa1\xc0\xd3\xb9\x91\x84\x10\xf6\xfd\x62\x90\x55\x39\xfa\xf3\xc7\x84\x2c\xb1\x92\x6d\x43\x03\x71\x31\xe8\xc1\x21\x4b\xe3\x91\x4f\xf2\x78\x7b\x04\xd1\x76\x9b\xb1\x48\x64\x7b\xe0\x6b\xcf\xdc\x64\xb9\x00\xbe\x0b\x66\x32\x8b\x76\x11\xe3\xe2\xe3\x5e\x7a\xb2\xde\xf6\xb1\xcf\xe0\x69\x2e\xa2\x94\xc5\xb9\xe7\xb0\x2c\x4d\x63\x26\x62\x1f\x9d\x44\x3c\x15\x71\x3a\xa4\x8d\x18\x7f\x68\xab\x5f\xa7\xe6\x3a\x72\x51\x7c\x3d\xab\x3a\x05\xfa\xd6\x46\x5b\xe2\xbb\x99\x5a\x69\x73\x92\xf4\x7a\x25\xb4\x10\x32\x79\x96\x45\x4d\xd7\x30\xc1\x93\x36\xd7\x50\x68\x92\x0d\x90\x69\x71\x3e\x86\xba\x82\xe5\x05\xfe\xbf\x80\x6d\x8f\x96\xcc\x5f\xa9\x9e\xfc\x6e\xb1\xf4\xc1\xcb\x8b\x83\x38\x03\x1b\x8b\xb7\x01\xfd\x73\x5b\xb9\xad\xfd\x99\xde\xa0\x82\x90\x2b\x4b\x52\x15\x3f\xe7\x35\xfd\x33\x27\x49\xad\x0d\x99\x56\x0a\x0b\x42\x3f\xbd\xae\xee\x41\x89\xac\x15\xa1\x1a\xea\x24\xba\xc4\xa7\x02\x33\xef\xa1\xbb\x95\x6b\xeb\xf1\x50\x1d\xe0\xf1\x54\xfb\x7e\xf1\x1d\x00\x00\xff\xff\xd4\x64\x65\xf2\x1e\x03\x00\x00")

func textAllocatorListGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textAllocatorListGotmpl,
		"text/allocator/list.gotmpl",
	)
}

func textAllocatorListGotmpl() (*asset, error) {
	bytes, err := textAllocatorListGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/allocator/list.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textAllocatorListmetadataGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xc1\x8a\xdb\x30\x10\xbd\xef\x57\x0c\x26\xd7\x98\x9e\x17\x7a\x50\x1d\x97\x15\x5d\xdb\x61\xa3\x16\xba\xb7\x59\x7b\xd2\x1a\x14\x69\x91\xc6\x6d\x82\xc9\xbf\x17\x39\x4a\xdc\x58\x14\x7a\xf2\xf0\x9e\xf4\xde\x9b\x19\x79\x1c\xd7\xd0\xd1\xbe\x37\x04\x99\xfd\x45\xce\xf5\x1d\x65\x70\x3e\x8f\x23\x38\x34\x3f\x08\xf2\x57\x6b\xc8\xdf\x21\x42\x6b\xdb\x22\x5b\x17\x61\x3a\x52\x3b\x30\x29\x3a\xbc\x6b\x64\x82\xfc\x7c\x7e\x08\xb0\xe9\x22\xbf\x2c\x66\xcb\x8e\xf6\x38\x68\x0e\x8e\x0f\x01\xcf\x5e\x9b\xba\x8c\xfe\x8c\x6f\x97\x22\x13\xcf\xcf\x4d\x21\x54\xf3\x02\x72\x93\x90\x4f\xcd\x4e\x81\xdc\x26\x78\x21\xb6\xa2\x90\xea\x7b\x42\x7c\x7e\x29\xcb\x9b\xe1\x0c\xcb\x7a\xa7\x44\x5d\x94\xbb\x54\xa9\xa9\xeb\xb2\x50\x65\xea\x5d\x09\x59\xab\xb2\x0e\xd7\x52\xae\x54\x62\x23\x94\x88\x56\xff\x39\xce\x29\xd4\x74\x48\x6e\x16\x8a\xf3\xc1\x94\x7a\xb2\x9e\xe5\x76\xd9\xd4\x1a\xf6\xd6\x1d\x90\x3f\x9d\x98\x3c\xe4\x05\xbe\x63\xdb\xf3\x29\xaf\xe8\x60\xdd\x29\x57\x96\x51\x03\xbb\x81\x96\xc3\xe8\xf7\xb0\x3a\xc2\xe3\x47\xf0\xc3\x9b\x67\xf7\xaf\xab\x09\xfc\xd5\x53\x5c\xf5\xef\x9e\x7f\xc2\xea\x14\x34\xfe\xce\xb0\x3a\x46\xbf\x71\x0c\x6c\xf8\x92\xe9\xa6\x8f\xf6\x17\x38\xfb\x90\xcd\xf8\x7d\x2c\x4d\x06\x72\x69\x3c\xa3\x69\xaf\x43\x9c\x67\xb0\x63\xe4\xc1\xe7\x85\x35\x86\x5a\x9e\x82\x24\x5d\x5d\x0f\x55\xd8\x1b\x26\x13\x74\x2a\xdb\xd1\x9d\xc0\x82\x83\x39\xdd\xfa\x96\x36\x8a\x4e\xfa\x71\x8d\x15\x31\x76\xc8\x78\x5b\xe2\x17\x0a\x0d\x3e\x4e\xf5\x37\xd4\x03\xc5\x87\x01\xb7\xc7\x77\x6d\x31\xfc\x17\xeb\x19\x8b\xf5\x85\xfd\x13\x00\x00\xff\xff\xf4\x8a\xcf\xc7\xa1\x03\x00\x00")

func textAllocatorListmetadataGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textAllocatorListmetadataGotmpl,
		"text/allocator/listmetadata.gotmpl",
	)
}

func textAllocatorListmetadataGotmpl() (*asset, error) {
	bytes, err := textAllocatorListmetadataGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/allocator/listmetadata.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textAllocatorShowGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x41\x6f\xa3\x3c\x10\xbd\xe7\x57\x58\xa8\xd7\xa0\xef\xfc\x49\x7b\x60\x1d\xb7\xb1\x14\x0c\x02\xb7\x52\x7a\x73\xc3\x90\xb5\xe4\xd8\x11\x36\x55\x51\xc4\x7f\x5f\x19\x28\x49\x71\xb2\xb7\xf0\xde\xcc\x9b\xf1\xf3\x73\x2e\x97\x35\xaa\xa0\x96\x1a\x50\x64\x3e\xa1\x69\x64\x05\x11\xea\xfb\xcb\x05\xc9\x1a\x55\xd2\x9e\x95\xe8\x12\xa5\xcc\x41\x38\xd3\xa0\x78\xa4\xe0\x0b\x0e\xad\x03\x0e\xa7\xb3\x12\x0e\x50\xec\x51\xd0\x55\xdf\xaf\x3c\xab\xab\xa1\xec\xaa\x5c\x41\x2d\x5a\xe5\xbc\xf0\xca\xe3\xd1\x7b\xc6\xc8\x34\xc6\x89\x8f\xf1\x47\x94\xec\x76\x19\x4e\x78\x56\x20\xba\x09\xc8\x6d\x56\x72\x44\xf3\x68\x01\xe3\x24\x4f\x30\xe5\xfb\x59\xfa\x4a\x3d\x17\x24\x9c\x41\x59\xc9\x13\x86\x49\x19\x30\x38\x63\x8c\x60\x4e\xc2\xd1\x69\x42\x19\x27\xcc\xb7\x4d\x63\x1e\x7a\x33\xac\x10\xbf\x1b\x0d\x74\xb3\x90\x89\xe7\xca\x90\xda\x1a\xeb\x68\xbe\x40\x6b\xd3\x9c\x84\xfb\xdd\x39\xb0\x28\xc6\xe2\x2c\x0e\xd2\x75\x71\x0a\x27\xd3\x74\x31\x37\x4e\x28\xe4\x9a\x16\x96\xe7\x96\x35\x7a\xfa\x42\xff\xff\x42\xb6\xfd\xb0\xae\x79\xd4\x1a\xc0\xaf\x16\xaa\x70\xf0\xd3\xd7\x30\x64\x20\x40\x59\x18\x1d\xf9\x2f\x9a\x2e\x3c\x70\x5d\x81\x46\x31\xd5\xd6\x09\x7d\x00\xbb\x3c\x67\xe9\x84\x6b\x6d\x8c\x8d\xd6\x70\x70\x10\xb6\xcb\x7a\x2e\x4a\x85\xd4\x0e\xb4\xd7\x49\x4d\x05\x3f\x04\x16\xdc\xcd\x76\xeb\x6b\x0e\xd7\x83\xda\xbc\x4b\xdf\xaf\xfc\xcd\x45\x1b\x92\xef\xb2\x7d\x4a\x18\xbf\x17\xb3\x82\x94\xd9\x6b\x81\xc9\x3d\xee\x3b\x3b\x9e\x5b\x50\x7c\x9f\x2f\xb3\x16\x6d\x49\xb2\xe3\xdb\x7d\x14\x04\x33\x25\x69\x56\xec\xc3\x98\x65\x6f\x94\xbd\x04\xf0\x1b\x29\x4a\x9a\xb1\x00\xf7\x4f\x68\x4a\xb1\x13\x1f\x23\x96\x13\xb6\x99\x34\x16\x33\xe7\xdd\x71\xc6\x9e\xe9\xcb\x74\xbc\xa1\xa8\x11\xfa\x08\x3f\x8d\xf2\x56\x6f\xe0\xac\x4c\x77\x02\xed\xc2\xbc\x62\xd5\x5a\x07\x77\x82\xfc\x2d\xc2\xc4\x09\x1e\x34\xf1\xee\x1c\x50\x5b\x10\xca\xfd\xe9\x82\xb5\x63\x66\x2a\x18\xf3\xb9\x6c\x49\xcd\xa7\xd4\xc7\x5b\x74\xbe\xf2\x5c\x09\x6d\xa9\xae\xcd\x58\x39\x7f\xc6\x6f\xd0\x58\x69\xf4\x0f\xa5\x1b\xda\x3f\x5b\x6c\x5a\xed\x1e\x15\xe4\xa0\x2b\xa9\x8f\x37\x96\x8f\xa1\x1b\xff\xd3\xd6\xd1\x0d\xf1\xaf\xaf\x6b\x40\x67\xbf\xb0\xd1\xb5\x3c\xb6\x8d\x70\xd2\xe8\xc1\xd6\x81\x1f\x2a\xaf\x0d\xfe\xc1\xad\xbf\x7f\xf5\xfd\xea\x6f\x00\x00\x00\xff\xff\x12\xa7\xaf\x85\xbd\x05\x00\x00")

func textAllocatorShowGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textAllocatorShowGotmpl,
		"text/allocator/show.gotmpl",
	)
}

func textAllocatorShowGotmpl() (*asset, error) {
	bytes, err := textAllocatorShowGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/allocator/show.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textAllocatorShowmetadataGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4f\x6f\xa3\x3e\x10\xbd\xe7\x53\x58\xa8\xd7\xa0\xdf\xb9\xd2\xef\xc0\x12\xb7\x41\x1b\x0c\x4a\xdc\x48\xe9\xcd\x0d\x43\x8a\xe4\xd8\x11\x1e\xba\x45\x88\xef\xbe\x72\x20\x40\x71\xb2\x37\x7b\xde\xcc\x9b\x3f\x7e\xe3\xa6\x59\x92\x0c\xf2\x42\x01\xf1\xf4\x17\x94\x65\x91\x81\x47\xda\xb6\x69\x48\x91\x93\xac\x30\x17\x29\xea\x40\x4a\x7d\x14\xa8\x4b\xe2\x77\x10\x7c\xc3\xb1\x42\xe0\x70\xbe\x48\x81\x40\x7c\x6b\x05\x95\xb5\xed\xc2\xa2\x2a\xbb\xba\x8d\xcc\x19\xe4\xa2\x92\x68\x89\x17\xd6\xee\xbd\x27\x8c\xf6\x69\x50\x7c\x74\x07\x2f\xd8\x6c\x92\x30\xe0\xc9\x96\x44\x2b\x07\x5c\x27\x3b\x4e\xa2\xd4\xb1\x87\x41\x1a\x84\x11\x3f\x38\xc0\xcb\x96\xd2\x21\xe1\x68\x8e\xd8\x8e\x07\x2c\xa4\x3b\x97\x29\x61\x8c\x86\x9c\xba\xb9\xe3\x20\x62\x9c\x32\x1b\xe6\x62\x94\x07\xab\x80\x07\x7d\xaa\x87\x53\xbb\x96\xe1\xbf\x6b\x05\xd1\x6a\xc6\xe1\x0f\x9e\x2e\xb4\xd6\x06\xa3\x74\xde\xc6\x92\xe4\xba\x3c\x0b\xfc\x55\x23\x18\xe2\x87\xe2\x22\x8e\x05\xd6\x7e\x0c\x67\x5d\xd6\x3e\xd7\x28\x24\xc1\xb2\x82\x79\xfb\x45\x4e\x9e\xbe\xc9\xf3\xff\xc4\x54\x1f\x06\xcb\x47\xa1\x8e\xf9\xcd\x40\xf7\xa6\xe4\x4f\x81\x9f\xe4\xa9\xb6\x1c\xd3\x1a\x9e\xbe\xfb\x7c\x4d\x63\xd1\x41\x0f\x4d\x03\xd2\x74\x66\xef\x3f\x8f\x4c\x75\x32\x29\x4b\x82\x22\x7e\xa4\x0c\x0a\x75\x04\x33\x9f\xc1\x0e\x05\x56\xc6\x0f\xb5\x52\x70\xc4\x6b\x21\x4e\x57\x37\xa7\x58\x14\x0a\x41\x59\x9e\x58\x67\xf0\x83\x60\x86\x91\xb1\xba\xe5\x50\x6d\x4f\x7a\xe5\x2f\x85\x3a\x01\xf1\x63\x40\x91\x09\x14\xc3\x23\xfe\x06\xdb\xe0\xf3\xf5\xbc\x17\xb2\x82\x5e\x0a\x64\x90\xdb\xd8\xa2\x2d\x6d\x68\xac\x6d\x17\x56\x22\xde\x8a\xa6\x9b\xe4\x10\x53\xc6\xef\x29\x7d\x4b\x77\xc9\xdb\x36\xa4\xf7\xb0\x9b\x7a\x2d\x36\x83\xf8\x21\x9d\xab\xd3\x5b\xd3\x60\xc3\xd7\x07\xcf\xd9\x82\x98\xc6\xc9\xd6\xdd\x99\x38\xd9\x47\xec\xd5\x31\xef\xe9\x76\x17\x25\xcc\xb1\xdb\x2d\xee\xf7\x08\xc5\x47\x67\x4b\x29\x5b\xf5\x1c\x0f\x36\x8f\x84\x09\x7b\x89\x5e\xfb\xf6\xa6\x93\x9e\x0e\xca\xbe\xdb\x0a\x2e\x52\xd7\x67\x50\xe8\x2e\x46\x28\x2b\x83\x70\x67\x63\x6e\x24\x4c\x9c\xe1\x41\x10\xaf\x2f\x0e\xb4\x06\x21\xf1\xb3\x76\xca\xf6\x99\xce\xa0\xdb\x82\x79\x48\xac\xbf\x0a\x75\x22\x73\xd9\xd8\x27\x4f\xa5\x50\x26\x52\xb9\xee\x3c\x87\xab\xbf\x87\xd2\x14\x5a\xfd\x60\x9a\xc0\xf6\x7f\x08\x75\xa5\xf0\x91\x43\x0a\x2a\x2b\xd4\x69\x32\xf2\x4e\xc1\xdd\xb7\xba\xf4\x26\xc0\xbf\x6e\xa3\x40\x87\x79\x85\x5a\xe5\xc5\xa9\x2a\x05\x16\x5a\x5d\xc7\x3a\x4a\x79\x0c\xb0\x7f\xfb\xf2\x76\x6a\xdb\xc5\xdf\x00\x00\x00\xff\xff\xf3\x42\x91\xf2\x40\x06\x00\x00")

func textAllocatorShowmetadataGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textAllocatorShowmetadataGotmpl,
		"text/allocator/showmetadata.gotmpl",
	)
}

func textAllocatorShowmetadataGotmpl() (*asset, error) {
	bytes, err := textAllocatorShowmetadataGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/allocator/showmetadata.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textApmListGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x41\x6a\xf3\x30\x10\x85\xf7\x39\x85\xf0\xea\xff\x17\x11\xbd\x82\xaa\x18\x2c\x48\xd3\x12\x29\x81\x2e\x55\x7b\x9c\x08\x64\xd9\x48\xe3\x10\x63\x7c\xf7\x92\xc8\x69\x48\xdc\xd2\x16\xba\xf2\xf0\xc6\xf3\xcd\x9b\xa7\xbe\x9f\x93\x02\x4a\xe3\x80\x24\xf5\x01\xbc\x37\x05\x24\x64\x18\xfa\x9e\x78\xed\x76\x40\x28\x6b\xaa\x70\x16\xe0\x08\x79\x8b\xa0\xa0\x6a\xac\x46\x20\x74\x18\x66\x7d\x4f\xc0\x15\xf1\xff\x4b\x71\x05\x16\x50\xea\xd6\xe2\x89\x37\x3b\xe9\x09\x5f\x6e\xa4\x4a\xd7\x44\x2c\xc6\x1d\xa8\xdf\x62\x91\x48\xc5\xd4\x46\xde\xcb\x24\xd9\xa6\x6b\x29\x9e\x57\xd3\x06\x67\x2f\x8c\x0b\xf5\x3a\x21\x89\x95\x54\x6c\xc5\xd3\x09\x2c\xc9\x52\xb6\x54\xd9\x74\x22\x5d\x32\xa9\x04\x97\x29\x5b\xf3\x6c\x34\x77\x36\x7c\x1b\xc1\xe9\x5a\x2a\x16\x77\xd3\x54\xa2\xc6\x36\x5c\x46\x3e\x74\x53\x12\xaa\xea\xa6\xb6\xf5\xae\xa3\xc2\x05\xd4\x2e\x87\x98\x24\xf9\x67\x5c\x01\xc7\x4f\xfb\x0f\xff\xa9\x04\x7f\x30\x39\x6c\xc1\x07\x53\xbb\x98\xbd\x0d\x10\xbd\xce\xa3\x7b\x70\xc5\x6f\x16\x96\xb5\xaf\x34\x72\xdb\x06\x04\xff\xd8\x21\x84\x6f\x3c\x3c\x41\x55\xfb\xab\xc6\x75\xa3\x73\x83\x1d\x41\xdf\xc2\x9f\x38\xb2\xe0\xbe\x6c\xfe\x84\x4d\x33\xd0\x16\xf7\xdd\xfd\x6b\xa4\x56\x07\x34\x79\x00\xed\xf3\xfd\x78\xf0\xad\x28\x16\x23\xeb\x42\x8d\xdf\xf7\x00\x00\x00\xff\xff\x19\x14\x3f\x02\x0a\x03\x00\x00")

func textApmListGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textApmListGotmpl,
		"text/apm/list.gotmpl",
	)
}

func textApmListGotmpl() (*asset, error) {
	bytes, err := textApmListGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/apm/list.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textApmPlanhistoryGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xc1\x8e\x83\x20\x10\x86\xef\x7d\x0a\xe2\x7d\x79\x07\xb2\xd0\xc4\xa4\x75\x4d\x65\x7b\x67\x65\x6a\x4c\x04\x09\x3b\x6e\x36\x21\xbe\x7b\x83\xd6\xda\x8a\x27\xc7\xf9\x67\xbe\xff\x67\x42\xf8\x20\x1a\x6e\xad\x05\x92\xf5\x7f\xe0\x7d\xab\x21\x23\xe3\x18\x02\xf1\xca\x36\x40\xe8\xf4\x03\xff\x50\x0f\x08\x12\x8c\xeb\x14\x02\xa1\xe3\x78\x08\x81\x80\xd5\xf3\xec\x52\xac\x30\x0d\x37\x35\x74\x18\x59\x87\xd8\xcf\x98\x94\xe2\x5c\x4a\x92\xf3\x07\x1f\xd5\xcf\x5c\x3c\xa5\x82\x9d\x45\x22\x5e\xc5\xa5\xca\xbf\x8a\xa4\x5f\x49\x51\x56\x4f\xfc\xda\xe7\xdf\x17\x26\xf7\x16\x16\x17\x51\x70\x22\xf3\x1d\xa7\x23\xcb\x4f\x82\x93\x08\x4e\x97\x3f\x17\xe6\x64\xb7\xde\x26\x9e\x81\x96\x9d\xb2\x0c\x11\x8c\xc3\x9c\x6f\x56\x5f\xc5\x42\x19\xd8\x93\x29\x73\x86\x5e\xc1\xff\xb6\xbd\x4d\x5e\xd4\x81\x7d\x83\x9c\xfa\x66\xc3\xa8\x7b\xe3\x06\x04\xe6\x4c\x1c\xe3\x83\x57\x18\x41\x74\x6b\xf5\x00\x08\xab\x65\x3b\x05\x79\x37\x6a\x00\x99\x33\x47\xd5\x76\xa0\x23\xa8\x42\x70\x53\xe2\x04\x54\xf5\x83\xaf\x81\xb2\x1a\x5f\x02\x83\xd5\x53\x35\x7f\xef\x01\x00\x00\xff\xff\xb9\x24\x89\xcd\x59\x02\x00\x00")

func textApmPlanhistoryGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textApmPlanhistoryGotmpl,
		"text/apm/planhistory.gotmpl",
	)
}

func textApmPlanhistoryGotmpl() (*asset, error) {
	bytes, err := textApmPlanhistoryGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/apm/planhistory.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textDeploymentListGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x51\x6e\x82\x40\x10\x86\xdf\x3d\xc5\x64\xe3\xab\x7b\x80\x26\x3e\x6c\x85\xa4\xc4\x4a\x8c\x7a\x81\x81\x1d\x5a\x52\x58\x28\x2c\x4d\x1b\xc2\xdd\x1b\xd8\x1d\x2b\x6a\x13\x9f\x18\xbe\x99\x7f\xfe\x7f\xa0\xef\x57\xa0\x29\xcb\x0d\x81\xa8\xbe\xa8\x69\x72\x4d\x02\x86\xa1\xef\xa1\x41\xf3\x46\x20\x03\xaa\x8b\xea\xa7\x24\x63\x5b\xc7\xe9\x9b\xd2\xce\xd2\x89\xca\xba\x40\x4b\x20\x87\x61\x31\x62\xa3\x7d\x9f\x0b\xde\xab\x29\xc3\xae\xb0\xe3\xda\xc5\xe8\x27\xa2\xc0\x59\x58\x4c\xa6\x41\x11\xab\x5d\x28\x2e\x88\x08\x5f\xd5\xf1\x14\x6d\x8e\xa1\x3a\x6c\x5e\x66\x9d\x6d\xf4\xac\x62\x35\x43\x6a\xbf\xbb\x7a\xdf\x9f\x85\x93\xe1\xdd\x4b\xa6\xce\xf2\x23\x4f\xd0\x20\x3c\xad\x41\xac\x78\x7c\x89\x75\x79\x43\xea\x96\xb0\x49\xdf\xe7\xdc\x2f\x3e\x50\x5b\x75\x4d\x4a\xad\xc7\x79\x06\xf4\xd9\x61\x01\x72\x9b\x1b\x0d\xc2\x99\xf8\xcf\xca\x96\x6b\x90\x51\x30\x21\x32\xfa\x1f\x21\xd6\x25\xab\xc6\x4c\x8f\x49\x7c\xd2\x3f\x21\x47\xbf\x27\xe7\xea\xdc\xe2\x7f\x22\x63\x2c\xc9\xad\xb0\x98\x4c\x85\x8c\x82\xcb\x09\x3e\x64\x36\xe3\x82\xde\x20\x8e\x70\xe5\xea\x9e\xbf\x01\x00\x00\xff\xff\x78\x70\x0c\xba\x84\x02\x00\x00")

func textDeploymentListGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textDeploymentListGotmpl,
		"text/deployment/list.gotmpl",
	)
}

func textDeploymentListGotmpl() (*asset, error) {
	bytes, err := textDeploymentListGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/deployment/list.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textDeploymentNotelistGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xc1\x8e\x83\x20\x14\x45\xf7\x7e\x05\x61\x3f\xfc\xc3\x64\x24\x13\x17\x38\xc9\x88\x1f\x40\xcb\xd5\x98\x28\x1a\xc0\xa6\x09\xe1\xdf\x1b\xa4\xb8\xb0\x2b\x5e\xce\xe3\x9d\x7b\x43\xf8\x22\x1a\xc3\x64\x40\xe8\xfa\x80\xb5\x93\x06\x25\x31\x86\x40\xac\x32\x23\x08\x6b\x57\x0f\x97\x09\x9e\xb8\xef\x1e\x12\xcb\x36\x2b\x0f\xc2\x62\xac\x12\x36\xfa\xbd\x2f\x43\x31\x6a\x0c\x6a\x9f\x7d\x12\x56\x29\x89\xca\x46\xf0\xac\xf7\xea\x96\xff\xd2\x9f\x3f\x21\x78\x2b\x49\x53\x5f\x37\x7d\xc7\xff\xaf\x4c\xf0\xae\xfb\xfe\xe5\xa7\xf2\xd2\x32\xf5\x61\x72\x5a\xe0\xbc\x5a\xb6\x72\x7b\x9c\xb2\xa6\xce\x8e\x53\xc6\x7a\x07\xfb\x49\x05\x9c\x53\x23\x4a\x02\x8c\x3e\xa6\xfc\xbe\x02\x00\x00\xff\xff\x1a\x65\x9c\x45\x31\x01\x00\x00")

func textDeploymentNotelistGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textDeploymentNotelistGotmpl,
		"text/deployment/notelist.gotmpl",
	)
}

func textDeploymentNotelistGotmpl() (*asset, error) {
	bytes, err := textDeploymentNotelistGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/deployment/notelist.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textDeploymentSearchGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xdd\x6a\x83\x30\x14\xbe\xef\x53\x84\xd0\xdb\xfa\x00\x83\x5e\x64\x55\x98\x74\x95\xd2\xf6\x05\x8e\x7a\xba\xc9\x4c\x0c\x49\x1c\x1b\xe2\xbb\x0f\xf3\x53\x4c\xed\xa0\x57\xc6\xef\x9c\xef\x27\x9f\x0e\xc3\x86\xd4\x78\x6d\x04\x12\xda\x7d\xa3\x52\x4d\x8d\x94\x8c\xe3\x30\x10\x05\xe2\x03\x49\x92\xa2\x6c\xbb\x5f\x8e\xc2\x68\x87\xe3\x0f\x56\xbd\xc1\x0b\x72\xd9\x82\x41\x92\x8c\xe3\x6a\x82\x45\xed\xe7\xe1\x10\x74\x6b\xbc\x42\xdf\x9a\x49\x76\x35\xf9\xd1\x3c\x75\x16\x06\x4a\xbb\x48\x0b\x76\xc8\xe8\x0c\xa1\xd9\x3b\x3b\x5f\xf2\xdd\x39\x63\xa7\xdd\x5b\x34\xd9\xe7\xaf\xac\x60\x11\xc4\x8e\x87\xbb\xf7\xe3\x8d\x68\x0d\x1f\xde\xc4\x4e\xd6\x5f\x4d\x09\x02\xc8\xcb\x96\xd0\x4d\x58\x5f\x83\xe4\x0b\x44\x6a\x04\x55\x7d\xde\xe1\xd8\x82\x36\x4d\xf5\x68\xe6\x4d\x4f\xa8\xbb\x5e\x55\xa8\x13\x26\xb9\xbd\xad\x95\xdf\x92\x24\x4f\x6d\x09\x28\xea\xff\x19\xde\x35\xf0\x42\x88\xa7\xd8\xd9\x3c\x9b\x53\x88\xe3\x3e\xa5\xb2\xb7\x05\x39\xba\x2f\x6b\xc9\xbb\x01\xe1\x8b\x26\x05\x70\x74\x7f\x81\x81\xd2\x1e\x62\xf3\xf9\x72\xd0\x8d\xd6\x5d\x4d\x0b\x28\x34\xe0\xe3\x86\x00\xee\xf9\x17\x00\x00\xff\xff\x34\xd0\x98\x15\xcd\x02\x00\x00")

func textDeploymentSearchGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textDeploymentSearchGotmpl,
		"text/deployment/search.gotmpl",
	)
}

func textDeploymentSearchGotmpl() (*asset, error) {
	bytes, err := textDeploymentSearchGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/deployment/search.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textDeploymentTemplateListGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xcd\x4e\x87\x30\x10\xc4\xef\xff\xa7\xd8\xf4\x6e\xdf\xc1\x58\x0e\x3d\xf0\x11\xcb\xc5\x63\xa5\x83\x69\x02\x85\x94\xa2\x92\xa6\xef\x6e\x00\xd1\xa4\x9c\x76\x32\xbb\xfb\x9b\x89\xf1\x89\x0c\x7a\xeb\x40\x6c\xfa\x84\xf7\xd6\x80\x51\x4a\x31\x92\xd7\xee\x03\xc4\x1b\xbd\x0d\x93\x36\x87\x87\x6f\x74\x6b\x40\x8b\x71\x1e\x74\x00\xf1\x94\x1e\x31\x12\xdc\xb9\xfe\x17\x17\xd2\xa0\xd7\xeb\x10\x76\xe2\x63\x8f\x22\x26\xc5\x2f\x3e\xe8\xf7\x53\x10\xab\x9e\xcb\x22\x77\x99\x7a\x53\x6d\x51\xde\x6c\x51\xa8\x97\x57\xd9\xb4\xb2\xae\xfe\xa8\xb7\xa6\x7b\x29\x2e\x45\xf6\xcb\x2b\x3d\x22\x0f\xe7\x6a\x5b\x02\xc6\xfa\xcb\xc1\xe4\xf7\x02\x4b\xe7\xed\x1c\xec\xe4\xae\x28\x38\x73\xa8\x73\xfe\x04\x00\x00\xff\xff\x7d\x8a\x96\xef\x3e\x01\x00\x00")

func textDeploymentTemplateListGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textDeploymentTemplateListGotmpl,
		"text/deployment-template/list.gotmpl",
	)
}

func textDeploymentTemplateListGotmpl() (*asset, error) {
	bytes, err := textDeploymentTemplateListGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/deployment-template/list.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textElasticsearchListGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x52\x41\x6e\xdb\x30\x10\xbc\xe7\x15\x0b\xa2\x01\xec\x83\xf9\x80\x02\x3d\x30\xb2\x02\x0b\x76\x24\x23\x54\x02\xb4\x37\xc6\x5c\xd9\x44\x69\x52\x20\x57\x6d\x03\xc1\x7f\x2f\x2c\xc9\x49\x18\x20\xe9\xa1\x27\x2d\x67\x77\x66\xb8\x43\xf5\xfd\x02\x34\x36\xc6\x21\x30\xff\x0b\x43\x30\x1a\x19\x9c\x4e\x7d\x0f\x41\xb9\x3d\x02\xcf\xad\x8a\x64\x76\x11\x55\xd8\x1d\x32\xdb\x45\xc2\x10\x87\x09\xfc\x83\xbb\x8e\xb0\xc6\x63\x6b\x15\x21\xf0\xd3\xe9\xaa\xef\x01\x9d\x1e\x05\x5e\x8a\x8b\x81\xc6\x46\x75\x96\xce\xfa\x57\x67\x63\x96\x6d\x1e\x64\x9d\xdf\x43\xb1\x1c\x3d\x49\x3d\x0d\x04\x56\x8a\xbb\x9c\xbd\x41\x98\xac\x45\xfd\x20\x13\xe8\x31\xbf\x97\x45\x55\x26\xd8\xba\xb8\x11\xa5\x48\x20\xb1\xbd\x63\x93\xdf\x05\xca\xc4\x56\x64\x45\xfd\x9d\x25\x9e\x3f\xaa\x32\x97\xc9\x3d\x98\x2c\xc5\x56\xae\xaa\x1a\x8a\xf2\xb6\x4a\x54\x57\xb9\xd8\xd4\xab\x44\x81\x6d\xaa\x6c\x9d\x2f\x2f\x66\xff\x88\xef\x9c\x14\x9f\xce\xc5\x32\xd9\x7e\x8f\x34\x35\x4a\x75\x1c\x62\x7d\xed\x71\x49\x8a\xba\x98\xcc\xcf\xf6\x48\xb9\xcc\xba\x10\xd0\x51\x15\xb6\xe8\xb4\x71\xfb\xad\x55\x0e\xf8\x9c\x9f\xbf\xe9\x2d\xf8\x23\x86\x68\xbc\x4b\x53\x59\x80\x69\x80\x8b\x18\xfd\xce\x28\x42\xbd\x36\x4f\xca\xa9\xe4\xc1\x19\x85\x0e\x87\x95\xd1\x46\x1c\x90\x46\xd9\x38\x41\x4e\x7f\x2e\x28\xda\xe3\x7f\xa9\x35\x3e\x1c\x15\xd5\xbe\xf5\xd6\xef\x9f\x0b\xd7\x78\xe0\xf0\x7e\xe8\xb7\xa1\x03\x7c\x89\x4e\xb5\xf1\xe0\xe9\x76\xa0\xc0\xd7\x6f\xd0\x06\xe3\xa8\x01\x76\x4d\x30\xbb\xd6\x73\x06\x33\x8d\x01\x9b\x1b\xef\x2d\x70\x39\x8d\x47\xbe\x42\x65\xe9\xf0\x3c\x9f\xda\x85\xa3\xb7\xdd\xcc\x77\x8e\xe6\xe3\x3f\xfd\xde\xe3\x93\x08\x26\xd1\x81\xf6\x72\x82\xd7\xc5\x17\x1f\x32\x37\x7e\xf7\x13\xf5\xf8\xf0\x63\xfd\x11\xed\x52\x8d\xdf\xbf\x01\x00\x00\xff\xff\x44\xdd\x04\x97\xd6\x03\x00\x00")

func textElasticsearchListGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textElasticsearchListGotmpl,
		"text/elasticsearch/list.gotmpl",
	)
}

func textElasticsearchListGotmpl() (*asset, error) {
	bytes, err := textElasticsearchListGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/elasticsearch/list.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textElasticsearchOverridecapacityGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x6a\xc3\x30\x10\x44\xef\xf9\x8a\xc5\xf4\x1a\x7f\x40\xa1\x07\x63\x4c\x11\x24\x69\x88\xd5\x43\x8f\x1b\x6b\x1d\x04\xaa\x62\xe4\x75\x69\x11\xfa\xf7\x22\x2b\x8a\x09\xf1\xc9\x3b\xb3\xde\x37\x23\xef\xb7\xa0\xa8\xd7\x96\xa0\xb8\xfe\x90\x73\x5a\x51\x01\x21\x78\x0f\x0e\xed\x85\xa0\x4c\x82\x7e\xa9\x9b\x98\x24\x7d\x0f\x06\x99\xa0\x0c\x61\x13\x6d\xab\x6e\xfb\x3c\x64\x98\xa2\x1e\x27\xc3\x91\xb5\x89\x21\x85\x38\xb4\xb2\x3a\xd4\x4d\x7b\xc3\x33\x9e\xd3\x50\xd4\xd5\xb1\xaa\x85\xfc\x4a\x0b\xc6\x73\xb2\x5b\xf9\x71\xaa\xde\x1b\xd8\x7f\xee\xa4\x38\xee\x44\x73\xba\xc3\x96\x6a\xb3\x7c\xa9\x71\xc0\x4e\xf3\x1f\xbc\xbe\x41\x99\x45\x5e\xb6\x7c\x75\x78\xa1\xfd\x64\x58\x0f\x46\x93\x9b\xff\x7a\x72\x1f\xd1\xc2\x8e\x8c\xb6\xa3\x31\xbd\xf3\x1e\x95\x5b\xeb\x7e\x49\x9d\xeb\x2e\x1d\xa2\x24\x33\x52\x08\x5b\xef\xc9\xaa\xe5\x32\x1f\xae\x64\x47\xc2\xaa\xbd\x42\x7a\x9e\xd2\xf7\x3f\x00\x00\xff\xff\x4a\x3d\x54\x0f\xcc\x01\x00\x00")

func textElasticsearchOverridecapacityGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textElasticsearchOverridecapacityGotmpl,
		"text/elasticsearch/overridecapacity.gotmpl",
	)
}

func textElasticsearchOverridecapacityGotmpl() (*asset, error) {
	bytes, err := textElasticsearchOverridecapacityGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/elasticsearch/overridecapacity.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textElasticsearchPlanhistoryGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xc1\x6e\xf3\x20\x10\x84\xef\x79\x0a\x94\xfb\xcf\x3b\xa0\x1f\x22\x59\x4a\x5c\x2b\xa6\xb9\x53\xd8\xb8\x48\x18\x5b\x78\x5d\x55\x42\x7e\xf7\x0a\x9c\xa6\xc1\x3e\x19\xb3\x33\xdf\xcc\x12\xe3\x3f\x62\xe0\x6e\x3d\x90\xe3\xf0\x05\x21\x58\x03\x47\xb2\x2c\x31\x92\xa0\x7c\x07\x84\xe6\x1f\xf8\x06\x3d\x23\x48\xe8\x47\xa7\x10\x08\x5d\x96\x43\x8c\x04\xbc\x59\xb5\xcf\xc3\x2f\xcb\xc0\x5d\xcd\x0e\x13\xea\x90\x32\x8e\x4c\x4a\x71\x69\x24\xa9\xf8\x8a\x47\xf5\x91\x0d\xcf\x41\xcd\x2e\x62\x33\xba\x89\x6b\x5b\xbd\xd5\x9b\xdb\x56\x8a\xa6\xdd\xdc\xf1\xf7\x2b\x93\x0f\x69\xce\xdb\xe1\x45\xcd\x89\xac\x76\x11\x27\x56\x9d\x05\x27\x89\xb9\xed\xf5\xbf\x00\xfe\xbd\x46\x5a\x9c\x36\x4e\x79\x86\x08\xfd\x88\x15\x2f\x8c\xaf\xa3\x5a\xf5\xb0\x1f\x52\xe1\xd4\x84\x56\x4f\xa0\x82\xfe\xa4\x37\x08\x93\x1d\x7c\xa1\x73\xe0\x0b\xd0\x79\xe8\xb6\x9b\xe9\xa1\x1f\x67\x84\x24\xe2\x73\x50\x98\x10\xb4\xc8\x7a\x78\x85\x37\xd2\x96\x3d\x3a\xc0\x93\xb2\x0e\x4c\x72\xb7\x08\x63\x2e\xfa\xea\xa6\xed\x30\x07\x0d\x94\x69\x5c\xbb\xe5\x6c\xf0\x26\x9f\xd6\xef\x4f\x00\x00\x00\xff\xff\xf5\x81\x36\xf0\x3c\x02\x00\x00")

func textElasticsearchPlanhistoryGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textElasticsearchPlanhistoryGotmpl,
		"text/elasticsearch/planhistory.gotmpl",
	)
}

func textElasticsearchPlanhistoryGotmpl() (*asset, error) {
	bytes, err := textElasticsearchPlanhistoryGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/elasticsearch/planhistory.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textFilteredGroupListGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xc1\x6a\xc4\x20\x14\x45\xf7\xf3\x15\x0f\xf7\xf5\x1f\xda\x44\xca\x6c\x9a\xa1\x3a\xa5\x5b\x67\xbc\x53\x02\x53\x0d\xe6\x19\x02\xe2\xbf\x97\x24\x4d\x4a\x0a\xed\xca\xa7\xef\x78\xee\xcd\xf9\x81\x1c\x6e\xad\x07\x89\x30\x20\xc6\xd6\x41\x50\x29\x39\x53\xb4\xfe\x03\x24\xe7\x0b\x46\x5c\x13\xc3\xe0\xb3\xbb\x5b\x06\xc9\x52\x0e\x39\x13\xbc\x5b\xd8\x6d\x58\x5d\x0e\x37\x9b\xee\x3c\xa9\x0e\x53\x06\x89\x63\xbd\x78\xd9\x5e\x66\x92\x84\x7a\x3f\xa9\xca\xa8\x9a\xaa\xe6\xfc\x62\x7e\x6f\x9b\x27\xad\x5e\xdf\xfe\xda\x6a\xf3\x68\xce\x7a\xd3\xff\x74\x9d\x6a\xc9\xe7\x18\x52\x27\x8f\xf5\xee\xd3\xf7\xab\x1a\x3b\x5c\x19\xee\x14\xc3\xd8\xa2\xaf\x42\xf2\xbc\xe7\x9a\x4b\x8f\x38\xfc\x47\x68\xb6\x9c\xfa\x35\x1c\xde\xcd\xd3\x72\x7e\x05\x00\x00\xff\xff\xca\x1c\x62\x31\x52\x01\x00\x00")

func textFilteredGroupListGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textFilteredGroupListGotmpl,
		"text/filtered-group/list.gotmpl",
	)
}

func textFilteredGroupListGotmpl() (*asset, error) {
	bytes, err := textFilteredGroupListGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/filtered-group/list.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textInstanceConfigurationCreateGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\x55\x48\x49\x4d\xcb\xcc\x4b\x55\x50\xca\x2f\x4b\x2d\x2a\xca\x4c\x49\x55\x52\xa8\xad\xad\xae\x4e\xad\x48\x4d\x2e\x2d\x49\x0d\x49\xcd\x2d\xc8\x49\x2c\x49\x55\xd0\xab\xad\xe5\xaa\xae\x56\x48\xcd\x4b\x01\x4b\xc3\x75\xa5\xa4\xa6\x25\x96\xe6\x94\x80\x34\x71\x81\x4c\x53\xf2\x74\x51\x82\x28\xd5\xf3\x74\x81\x09\xa6\xe6\xa5\x80\x59\x10\x1a\x10\x00\x00\xff\xff\x7e\x3b\x8f\x23\x75\x00\x00\x00")

func textInstanceConfigurationCreateGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textInstanceConfigurationCreateGotmpl,
		"text/instance-configuration/create.gotmpl",
	)
}

func textInstanceConfigurationCreateGotmpl() (*asset, error) {
	bytes, err := textInstanceConfigurationCreateGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/instance-configuration/create.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textInstanceConfigurationListGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xc1\x6e\xc3\x20\x10\x44\xef\xf9\x8a\x15\xf7\xf2\x0f\x56\x8c\x2a\x0e\xc1\x91\xe1\x92\x23\x35\x93\x08\xc9\xc6\x16\xc6\x6d\x23\xe4\x7f\xaf\x6c\x2b\xa9\x38\xb1\xec\x8c\x66\xde\xe6\xfc\x41\x0e\x77\x1f\x40\x6c\xfc\x46\x8c\xde\x81\xd1\xba\xe6\x4c\xd1\x86\x07\x88\xef\x1f\xfc\xa2\x5b\x12\x0c\x86\xa9\xb7\x09\xc4\xd7\xf5\x94\x33\x21\xb8\xc3\xfb\x1e\x5e\x59\x0e\x77\xbb\xf4\x69\x8b\x3a\x6d\x1d\xc4\x64\x7d\xe4\x26\xfb\xb5\x3b\x89\xa9\xea\x22\xca\x1d\xd3\x37\x6d\xc4\x85\x15\x3b\xa9\xb4\xa9\xd4\x59\x90\xb9\x5d\x45\x29\x69\xd3\xb4\xd5\xa7\xa0\xb6\x32\xb2\x29\xa5\x5a\xe8\x73\x2b\xaf\x46\x36\xea\x0d\xf1\x7f\xd1\x06\xcf\x65\x5d\x94\x73\x65\x07\x94\x88\x5c\x3f\xe7\x84\xa1\xf9\x09\x70\x85\x55\x86\x39\xd9\xd0\xc1\x3c\x27\x14\x82\x4e\x63\xb4\x0f\x5c\x96\x3e\xf9\xa9\xf7\x88\x85\x5a\x63\xee\xa2\x9f\x92\x1f\xc3\x8b\x09\xc1\xed\xd3\xf1\xfe\x05\x00\x00\xff\xff\x32\x18\xca\xa6\x8f\x01\x00\x00")

func textInstanceConfigurationListGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textInstanceConfigurationListGotmpl,
		"text/instance-configuration/list.gotmpl",
	)
}

func textInstanceConfigurationListGotmpl() (*asset, error) {
	bytes, err := textInstanceConfigurationListGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/instance-configuration/list.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textKibanaEnableGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\x41\x0a\x42\x31\x0c\x84\xe1\x7d\x4f\x11\xba\xb7\x97\xd0\x8d\xb8\xf5\x02\xd1\x4c\xa1\x50\xa3\xd4\x54\x84\x90\xbb\x4b\x7d\xf0\xb6\x33\x7c\xbf\xfb\x81\x04\xb5\x29\x28\x3f\x3f\x18\xa3\x09\x32\x45\xb8\xe3\x8b\xfb\x34\x5c\xf1\x78\x75\x36\x50\x89\x48\xee\x04\x95\xff\xbd\x2b\x41\xe5\xd9\x6d\xa1\xb4\x6a\xe5\xd2\x6e\xac\x7c\xec\xf3\x6d\x18\xe7\xd3\xb6\x43\x25\x22\xfd\x02\x00\x00\xff\xff\xde\xd1\x1e\x8d\x6e\x00\x00\x00")

func textKibanaEnableGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textKibanaEnableGotmpl,
		"text/kibana/enable.gotmpl",
	)
}

func textKibanaEnableGotmpl() (*asset, error) {
	bytes, err := textKibanaEnableGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/kibana/enable.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textKibanaListGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\xcf\x6e\xf2\x30\x10\xc4\xef\x3c\x85\x95\xd3\xc7\x01\xeb\x7b\x85\xd4\x44\x8a\x55\x4a\x2b\x6c\x90\x38\x9a\x64\x03\x96\x8c\x8d\xec\x0d\x22\x8a\xf2\xee\x55\xfe\x40\x1b\x44\xab\x56\x3d\x39\xde\x91\x7f\x33\xb3\xa9\xeb\x19\xc9\xa1\xd0\x16\x48\xe4\xce\xe0\xbd\xce\x21\x22\x4d\x53\xd7\xc4\x2b\xbb\x07\x42\x9f\xf5\x4e\x59\xc5\x4c\x19\x10\x7c\xe8\x24\xb8\x40\x56\x22\x48\x38\x9e\x8c\x42\x20\xb4\x69\x26\x75\x4d\xc0\xe6\xfd\xcb\xdb\xc7\x95\x9c\x43\xa1\x4a\x83\x2d\x78\xd2\x3a\x46\x6c\xb1\x16\x32\x59\x11\x3e\xef\xcd\x50\xed\xda\x23\x12\x32\x96\x6b\x31\x9a\x91\x68\x93\xac\x04\x7f\x5d\xde\x4d\x59\xfc\x16\x33\x2e\xb7\x63\x00\x5f\x0a\x19\x2f\x59\x22\x6e\x5e\x57\x25\x4d\xe2\x85\x4c\xb7\x77\x94\x64\x11\x0b\xc9\x99\x48\xe2\x15\x4b\x87\x38\xdd\xb3\xaf\xda\xb7\x45\xe9\x70\xe7\xf3\x11\x8c\x0a\x54\x58\x86\x3b\x63\xa2\x0b\x42\xa5\x3b\x39\xe3\xf6\x15\xe5\x36\xa0\xb2\x19\xf4\x8b\xfc\xa7\x6d\x0e\x97\x87\xf2\xff\x29\x15\xe0\xcf\x3a\x83\x0d\xf8\xa0\x9d\xed\x37\x6f\x02\x74\x6d\x66\x51\x77\xb5\xf9\x2f\xcc\x0a\xe7\x8f\x0a\x87\xec\x4f\x15\x42\x20\xdf\x07\x78\x81\xa3\xf3\x1f\x33\xa6\x4e\x2a\xd3\x58\x11\xf4\x25\x4c\xff\x9e\xc7\x80\x7d\x24\xfe\x90\x4c\x53\x50\x06\x0f\xd5\xe7\x5f\x30\x23\x34\x31\x2a\xa0\xce\x02\x28\x9f\x1d\x86\xae\xe3\x21\x9f\x0f\xa4\x2b\xb3\x3f\xdf\x03\x00\x00\xff\xff\x27\x18\x58\x59\x0a\x03\x00\x00")

func textKibanaListGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textKibanaListGotmpl,
		"text/kibana/list.gotmpl",
	)
}

func textKibanaListGotmpl() (*asset, error) {
	bytes, err := textKibanaListGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/kibana/list.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textMetadataShowGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x90\xbd\xb9\x83\x8b\xae\xea\x52\x0b\x2e\x47\xf3\x2b\x85\x18\x25\x24\xa2\x0c\x73\x77\x49\x43\x5b\xba\x9b\x81\xc7\x7b\x5f\xe4\x40\x1e\xe3\x14\x41\xf6\xf5\x41\x4a\x93\x87\x25\x55\x11\x4a\x1c\x1f\x20\x37\x3f\xf8\xe2\x5e\x32\xce\x78\xbe\x03\x67\x90\x53\x35\x22\x84\xe8\x1b\xbb\x1e\x8b\xcb\x63\xe4\x12\x72\x55\x99\xda\xb0\x7d\x77\x6d\xde\xcc\xb7\x99\xb4\xc3\xf1\x74\xe9\x56\x60\xab\x55\xb1\xeb\xf1\xdb\xd1\x6e\xe0\x50\xb0\xc0\x2d\xb7\x2d\x30\xff\x00\x00\x00\xff\xff\x6a\x3e\xaf\x40\xc7\x00\x00\x00")

func textMetadataShowGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textMetadataShowGotmpl,
		"text/metadata/show.gotmpl",
	)
}

func textMetadataShowGotmpl() (*asset, error) {
	bytes, err := textMetadataShowGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/metadata/show.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textPlatformRepositorylistGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x41\x4f\x84\x30\x14\x84\xef\xfc\x8a\x17\xe2\x41\x0f\x72\xf1\x66\xe2\x81\x25\xc4\x18\x22\x1a\xc0\xc3\x1e\xb1\x1d\x48\xe3\x6e\x4b\x68\x31\x92\xa6\xff\xdd\x40\xe9\x26\xbb\xae\x37\x98\xf7\xcd\xcc\x7b\xb5\xf6\x9e\x38\x3a\x21\x41\xb1\xfa\xc6\x38\x0a\x8e\x98\x9c\xb3\x96\xc6\x56\xf6\xa0\x24\x53\xb2\x13\xbd\x5e\x35\xfc\x80\x4d\x06\x0d\x8e\xc3\xa1\x35\xa0\xc4\xb9\xc8\x5a\x82\xe4\xde\x72\xfa\x08\x91\x1c\x5d\x3b\x1d\xcc\x92\x18\x2d\x55\x71\x99\xbe\xe6\x3e\xdf\xb4\x9f\x2b\x1a\x37\xfb\xf7\x4b\xa9\xca\x9f\x5f\xde\xca\x0b\x71\xf7\x91\x15\x79\x43\x57\x12\xd2\x2c\xcb\xeb\x9a\x8a\x7c\x7f\x2a\xba\xb2\x3c\xdd\xb0\xf5\x8f\x1e\x9f\xe8\xd6\xa8\xfa\xa1\x99\x07\x78\x20\x80\x77\x1b\xa8\x61\x8c\x90\xbd\x5e\xd0\xcd\x95\xd4\x41\xf3\x37\x27\x15\x06\xa5\x85\x51\xe3\x5c\xb6\x47\x9c\x2d\x14\x2c\x4b\xc1\xf9\x20\x04\x27\x15\x7a\xa1\xe4\x3f\xc3\xdd\xc4\xbe\x60\xc2\x29\x7f\xe7\x29\x63\xd0\xba\xc0\xbc\x11\xfe\xd9\x23\x6b\x21\xb9\x73\xd1\x6f\x00\x00\x00\xff\xff\xe3\xdb\x2e\xe1\xd4\x01\x00\x00")

func textPlatformRepositorylistGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textPlatformRepositorylistGotmpl,
		"text/platform/repositorylist.gotmpl",
	)
}

func textPlatformRepositorylistGotmpl() (*asset, error) {
	bytes, err := textPlatformRepositorylistGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/platform/repositorylist.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textProxyListGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xc1\x6a\xf3\x30\x10\x84\xef\x79\x8a\xc5\xe4\x98\xdf\x0f\x10\xf8\x0f\x6e\x6d\xb0\x21\x6e\x44\xeb\x42\x73\x54\xa2\x49\x2b\x90\xe5\xe2\xc8\xc5\x61\xd1\xbb\x17\x45\x71\xc0\xee\x69\xd7\x33\xb3\xf3\x59\xcc\xff\x48\xe1\xac\x2d\x28\xe9\x7e\xd0\xf7\x5a\x21\x21\xef\x99\xa9\x97\xf6\x13\x94\x8a\xbe\x1b\x35\x2e\x37\x0d\x23\x4e\x83\x43\x83\xf6\xdb\x48\x07\x4a\xbd\x5f\x31\x13\xac\x8a\x27\x8f\x65\xaa\x54\x38\xcb\xc1\xb8\xd0\xb8\x0a\xa8\x44\xbc\xee\x3f\x0e\x54\xe5\x91\xe1\xe4\x31\x8c\xa4\xdc\xbf\x35\x54\x89\x99\x48\x89\x78\x7f\xda\x55\xcf\x14\xcc\x97\xac\x2e\x16\x6e\x59\x64\xbb\xa6\x3c\x2c\xd4\xba\x68\xb2\x3c\x6b\xb2\x07\xf1\xcf\x2b\xc2\x0f\xdf\x3e\xaf\x55\x3e\xbb\x4d\xcb\xee\xe2\x2a\x31\xd7\xc4\x70\x34\xfa\x14\x1c\x2b\x5b\x2c\xf2\x90\xc6\x7d\x5d\x27\xd2\x5d\x8f\xc0\xb5\xb6\x0a\xe3\x86\xd6\x30\x68\x61\x1d\x6d\xff\x53\x5a\xc3\x49\x25\x9d\x0c\xb1\x18\xf0\x7e\xcb\x3c\x65\xbc\xdf\x30\xc3\xaa\x7b\xdf\xb4\xc5\xf9\x1b\x00\x00\xff\xff\xe9\xa1\x73\xa9\xa9\x01\x00\x00")

func textProxyListGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textProxyListGotmpl,
		"text/proxy/list.gotmpl",
	)
}

func textProxyListGotmpl() (*asset, error) {
	bytes, err := textProxyListGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/proxy/list.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textRolesListGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x6e\x83\x30\x10\x44\xef\xf9\x8a\x95\x95\x63\xcb\x07\x44\xea\x21\x09\x1c\x90\x22\x22\x01\xed\xdd\xad\x87\xc8\x92\x59\x2a\x6c\xaa\x4a\x96\xff\xbd\x02\x63\x92\xe6\xe4\x65\x67\xdf\xec\x2c\xde\xbf\x92\x42\xa7\x19\x24\x86\x1f\x8c\xa3\x56\x10\x14\x82\xf7\x34\x4a\xbe\x81\xb2\x0f\x69\x26\xd8\xa5\x85\x5f\x7c\x4d\x0e\x2d\xfa\x6f\x23\x1d\x28\x0b\x61\xe7\x3d\x81\x55\x24\xb6\x22\x39\x2a\x74\x72\x32\x6e\x36\xdc\xcd\x9b\x44\x7d\xbd\x14\x54\xe6\x71\x83\x93\x9f\xcb\xb4\x38\x5d\x8a\xa6\x29\x72\xaa\xdf\xab\xaa\xa8\x9b\x27\xf5\x7c\xad\xda\x63\x39\x0b\x45\x7b\xd8\x3e\xc4\x6a\xf9\x9c\x72\x0e\x94\x95\xf9\xa3\x85\xee\x28\x3b\x19\x58\xab\xf9\x66\x57\xcc\x80\x1f\x9a\x11\xcf\xea\x89\x19\x63\xa9\x6c\x3b\x24\x29\xde\x6d\x2c\x56\x6e\xf6\xaa\x07\x83\x95\x38\x4e\x2e\x8e\x22\x5e\x2e\x8e\xc6\x88\x05\x61\xb5\x3d\x0b\xb8\x66\x89\x71\xf7\xfa\x85\xf6\x30\xe8\xc1\x8e\x0e\x6f\xff\x2c\xcf\x03\x3b\xa9\x19\x63\x8a\x9a\x06\xef\x4a\x03\x57\xc9\x1e\x21\x1c\xbc\xdf\xd4\xd8\xf1\x5e\x50\xfa\x35\xf7\xe5\xa9\x8a\xef\x5f\x00\x00\x00\xff\xff\xf7\x93\xff\xd0\xf4\x01\x00\x00")

func textRolesListGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textRolesListGotmpl,
		"text/roles/list.gotmpl",
	)
}

func textRolesListGotmpl() (*asset, error) {
	bytes, err := textRolesListGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/roles/list.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textRunnerListGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xc1\x6e\x83\x30\x10\x44\xef\xf9\x8a\x95\xef\xe5\x1f\x52\xb0\x84\xa5\xd4\x41\x94\x1c\x7a\x74\xf0\xa4\x45\x22\x4b\x45\xec\xaa\x95\xe5\x7f\xaf\x1c\x1a\x24\xd3\xd3\xae\xdf\x78\x77\x66\x43\x78\x22\x8b\xcb\xc0\x20\x31\x7d\x61\x9e\x07\x0b\x41\x31\x86\x40\xb3\xe1\x77\x50\xd1\x7a\x66\xcc\xb7\x3b\xc3\x37\x7a\xef\xd0\xe1\xfa\x39\x1a\x07\x2a\x62\xdc\x85\x40\x60\xbb\x8c\xac\xcd\x63\xa5\xc5\xc5\xf8\xd1\xa5\x8d\xbb\x64\x25\xda\x93\xd6\xb2\x25\x55\x2d\x26\xce\x9c\x53\x11\xf5\xf1\xb5\x23\xd5\x64\x90\x44\x73\x7a\x3e\xa8\x92\x92\xa8\xf7\x2f\x72\xa3\xd6\x72\x7f\xe8\xea\xb7\x0d\x2d\x8f\x5a\xcb\xb2\x93\xd5\xea\xf9\xef\x8e\x14\xf9\xef\xa9\xaa\x6c\xba\xa8\xa7\x9b\x53\x4d\xce\x1a\x7f\x1e\x87\x3e\x29\x6c\xae\xd8\xfc\x87\x19\xdd\xc7\x4f\x0e\xcb\x89\x19\xbd\x83\x7d\x24\x00\xdb\x7b\xb7\xd4\xdf\x00\x00\x00\xff\xff\x60\x8b\xf0\xd7\x73\x01\x00\x00")

func textRunnerListGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textRunnerListGotmpl,
		"text/runner/list.gotmpl",
	)
}

func textRunnerListGotmpl() (*asset, error) {
	bytes, err := textRunnerListGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/runner/list.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textStackListGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x50\x4b\x6e\xab\x30\x14\x9d\xb3\x0a\x8b\x79\xbc\x07\xbf\x60\xbd\xa2\x7c\x5a\x05\x94\xf9\x0d\x3e\xa4\x56\xc0\x44\xc6\xa9\x2a\x5d\x79\xef\x15\x01\x22\x68\x47\xf7\xe8\x7c\x65\x33\x6f\x84\x41\x6d\x1d\x44\xda\x7d\xc1\x7b\x6b\x90\x8a\x18\x99\x85\x27\x77\x85\x90\x45\xa0\xea\xd6\x3f\x29\x7c\xa3\x7a\x04\x94\x68\xef\x0d\x05\x08\x19\x63\xc2\x2c\xe0\xcc\x98\x78\x81\xb9\xd1\xa0\xa6\x47\x13\x86\xc2\x64\x58\x4a\xcf\xfa\x54\xe4\xef\xc7\x74\x70\x05\xba\x0c\x27\xcd\xf4\x5e\x97\x3a\x1b\x57\x67\x52\xef\x55\x51\xe6\xdb\x42\xab\xd3\xf6\x4d\xe4\x07\xf5\x5f\xaf\x0d\xbb\xfc\x9f\x3a\xaa\x49\x59\x0a\xea\xe3\xf0\x62\x9f\xa3\xbf\xdf\x91\x30\xcb\x33\x7c\x6f\x3b\xb7\x6c\x94\x19\x1a\x04\x98\x15\xa7\x1b\xea\x83\xad\x7a\x90\xaf\x3e\x65\xd6\x55\x37\xf8\xbc\xa5\x2b\x56\xae\x9d\xbd\x90\xa3\xa5\x3c\x4d\x4f\x06\x61\x6b\x21\xd5\xbd\x1d\x3f\x67\x40\x7f\xaa\xd0\xf4\x88\x71\xc3\x0c\x67\xa6\xf0\x8c\xc6\xfb\x13\x00\x00\xff\xff\x34\x74\x77\x13\xa9\x01\x00\x00")

func textStackListGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textStackListGotmpl,
		"text/stack/list.gotmpl",
	)
}

func textStackListGotmpl() (*asset, error) {
	bytes, err := textStackListGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/stack/list.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textTokenCreateGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\xc1\x0a\xc2\x30\x10\x44\xef\xf9\x8a\x25\xf7\xf6\x2b\xea\xa1\x08\x7a\xc9\x0f\x44\x33\x81\x60\x4c\xa5\xa6\x22\x2c\xf9\x77\xc9\xc6\x06\x2f\x9e\x96\xd9\x99\x37\xc3\x3c\x90\x83\x0f\x09\xa4\x97\x17\xd6\x35\x38\x68\x2a\x85\x19\x6f\x5c\xb7\x0c\x83\xfb\x23\xda\x0c\x1a\x4b\x51\xcc\x84\xe4\xc4\xee\x94\x83\xb7\x5b\xcc\x15\x52\xb5\x4d\x9b\xf3\xf1\x70\xa2\x79\x6a\x35\xd9\x5e\x24\xde\xde\xdf\x54\xf0\x34\x9a\xe5\x86\x34\x4f\x62\xee\xa2\x0d\xc7\x27\xea\xd5\x83\x16\x99\x5c\xef\x91\x81\x0e\xd3\x0f\xfb\x97\x54\xfb\xfd\x04\x00\x00\xff\xff\x64\xda\x89\xba\xea\x00\x00\x00")

func textTokenCreateGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textTokenCreateGotmpl,
		"text/token/create.gotmpl",
	)
}

func textTokenCreateGotmpl() (*asset, error) {
	bytes, err := textTokenCreateGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/token/create.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textTokenListGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\xca\x83\x30\x14\x84\xf7\x9e\xe2\xf1\xf6\x7a\x0a\x5d\xc8\xff\x53\xc1\x7a\x81\xb4\x19\x8b\x34\x8d\x12\x63\x29\x84\xdc\xbd\xc4\x57\x43\xe9\x2a\x79\xc3\xcc\x7c\x13\x42\x49\x1a\xe3\x64\x41\x3c\x3f\xe1\xdc\xa4\xc1\x14\x63\x08\xe4\x94\xbd\x81\xaa\x61\xbe\xc3\xae\xbb\x84\x17\xae\x9b\xc7\x80\xc7\x62\x94\x07\x55\x31\x16\x21\x10\xac\x96\x44\xfe\x1c\x8d\x1a\xa3\xda\x8c\x4f\x85\x45\x22\xf1\xd0\xfd\x35\x27\x6a\x6b\x41\x78\x75\xd9\xed\xdc\x77\xff\xcd\x39\xbb\x7e\xc1\x89\x21\x57\x5b\x7f\xe7\xb2\xb3\x9f\x0d\x64\xe1\xe2\x26\xeb\xa9\x22\x26\xde\x07\x9b\x15\xe9\xe5\x52\x4e\xab\x3f\x08\x59\x5a\x1c\xd2\x3b\x00\x00\xff\xff\x57\x9e\xdb\xde\x06\x01\x00\x00")

func textTokenListGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textTokenListGotmpl,
		"text/token/list.gotmpl",
	)
}

func textTokenListGotmpl() (*asset, error) {
	bytes, err := textTokenListGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/token/list.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textUserKeyDetailsGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xcd\x6a\xc4\x20\x14\x85\xf7\xf3\x14\xe2\x7e\x7c\x87\x21\xba\x90\x40\x5b\xf2\xb3\xe8\xd2\xc6\x13\x10\x52\x13\x8c\x29\x2d\x17\xdf\xbd\x68\x42\x9b\x30\x2b\xf5\xdc\x7b\x3e\x3f\xa2\x3b\xb3\x18\x9d\x07\xe3\xf3\x17\x42\x70\x16\x9c\xa5\x44\x84\x6f\x0c\x5b\x44\x87\xcf\x65\x32\x11\x4c\xa4\x74\x23\x62\xf0\xb6\x8c\xff\x5a\x16\xa3\xd9\xa6\x98\x4b\xb7\x4c\xe3\x55\xa3\x1e\x9d\x7e\x7d\x61\xf2\xd1\xa9\x9d\x15\xcd\x47\xe9\x70\x2d\x2f\x01\xaf\xd5\x3b\x3f\xbf\xfb\x56\x35\x97\x40\xaa\xb6\x6a\xf4\x5b\xe6\xf1\x5d\x40\x54\x01\x26\xba\xd9\xcb\x6c\x75\xda\x15\x5a\x1e\x0a\x47\xe0\x46\x26\x6a\xfc\x94\xd9\x71\x62\x5a\x91\xd2\x9d\x08\xde\x3e\x2f\xf7\x2b\x42\x86\x10\x9d\xae\xd7\xca\xff\x6f\x12\xeb\x10\xdc\x92\x4d\x0a\x69\x27\xfe\x06\x00\x00\xff\xff\x04\x2b\x62\x02\x50\x01\x00\x00")

func textUserKeyDetailsGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textUserKeyDetailsGotmpl,
		"text/user/key-details.gotmpl",
	)
}

func textUserKeyDetailsGotmpl() (*asset, error) {
	bytes, err := textUserKeyDetailsGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/user/key-details.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textUserKeysDetailsGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xc1\x6e\xc3\x20\x10\x44\xef\xf9\x8a\x15\xf7\xf8\x1f\x22\xc3\xc1\x8a\xd4\x56\x8e\x73\xe8\x91\x86\x71\x85\xe4\x92\x08\x93\xaa\xd5\x8a\x7f\x8f\xd6\x26\x8a\x39\x2d\x3b\x30\x6f\x06\xe6\x3d\x39\x8c\x3e\x80\xd4\xf5\x17\x31\x7a\x07\x45\x39\x33\x53\xb4\xe1\x1b\xd4\x1c\xf1\x3f\xcb\x8e\x3f\x5c\xee\x09\x03\x7e\x6e\x93\x4d\xa0\x66\x11\x83\xcb\x79\xc7\x4c\x08\x6e\x75\x3d\x61\x0e\xa3\xbd\x4f\x49\x58\x3b\x09\x51\x6d\x6f\x0e\x43\xf7\xfe\x46\xfa\x30\x98\x35\x22\xd9\xaf\xc5\xa3\x3a\x5d\x09\xea\x68\x3e\xd5\x76\x3f\x9f\x4c\x5f\x09\xda\x9c\xda\xbe\xfb\x10\x9e\x2a\x01\x55\x5d\xa9\xd4\xb4\x11\x36\xf9\x6b\xd0\x52\x77\xe3\x6e\x3a\x5d\x3c\x45\xf0\xe3\xe2\x5b\xee\xca\xc4\x34\x23\xe7\xfd\xeb\x87\xd5\xe3\xf3\x8c\x28\x10\xe6\xcd\xb1\xb6\xbc\xd2\x34\xe6\x4b\xf4\x37\x69\x52\x48\x4f\xe6\x3a\x1f\x01\x00\x00\xff\xff\xb9\x69\x49\xe4\x83\x01\x00\x00")

func textUserKeysDetailsGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textUserKeysDetailsGotmpl,
		"text/user/keys-details.gotmpl",
	)
}

func textUserKeysDetailsGotmpl() (*asset, error) {
	bytes, err := textUserKeysDetailsGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/user/keys-details.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textUserListGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x50\x6d\x4a\xc4\x30\x10\xfd\xbf\xa7\x18\xf2\x7f\x73\x87\x8a\x59\x10\xb2\x15\x5a\x7b\x80\xec\xe6\x55\x02\x69\x56\xd2\x54\x94\x21\x77\x97\x76\x1b\xb5\x45\xfc\x95\x99\xf7\xe6\x7d\x10\xe6\x23\x59\xf4\x2e\x80\xc4\xed\x1d\x31\x3a\x0b\x41\x39\x33\x53\x34\xe1\x15\x24\xbb\x11\x71\x5c\x10\x7c\xe0\x3a\x25\xbc\x60\x78\xf3\x26\x81\x64\xce\x07\x66\x42\xb0\x77\xc1\xf7\x50\x0c\x2d\x7a\x33\xf9\x34\xfb\x1d\xe6\x20\x12\x5d\xab\x9a\xba\x3a\xab\x35\x22\x99\xcb\x32\x88\x53\xa7\x35\x2d\xc4\x16\x57\xe7\xea\x49\xef\xb0\xe6\x59\xab\x76\x7f\x57\x57\x0f\x5a\x3d\x8a\x35\x68\x57\x7d\x6e\xb9\x2c\xb5\x19\x50\xca\x14\xad\xeb\x49\x9e\x26\xef\x57\x6e\x3e\xdd\xac\xf0\x23\x72\x3e\x32\x23\xd8\x3f\xa4\x6a\x30\xce\xaf\xba\x9f\xf9\x1f\x11\x91\x6c\x71\x9d\xa2\x4b\x9f\xb2\xb9\x79\x8c\xdb\xaf\xf8\xc5\xaa\x60\x2e\x1e\xb6\x14\x2e\x56\xf7\xf7\x2b\x00\x00\xff\xff\x1a\xaa\xd0\x91\xb9\x01\x00\x00")

func textUserListGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textUserListGotmpl,
		"text/user/list.gotmpl",
	)
}

func textUserListGotmpl() (*asset, error) {
	bytes, err := textUserListGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/user/list.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _textUserUserDetailsGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x51\x6a\xc3\x30\x10\x44\xff\x73\x8a\x45\xff\xd1\x1d\x5c\xaa\x40\x41\x71\xc1\xae\x0f\xa0\x44\x63\x10\xac\x9d\x62\x4b\xa5\x65\xd1\xdd\x8b\xad\xa4\xad\x43\xc9\xdf\x6a\x67\xde\x68\x56\x64\x4f\x1e\x7d\x18\x41\xea\xf2\x81\x69\x0a\x1e\x8a\x72\x16\xc1\x27\xce\x29\xe2\x0d\xc3\x3b\xbb\x08\xd2\x39\xef\x44\x08\xa3\x5f\xe5\x1f\xca\xa3\x77\x89\xe3\x02\xed\x96\x34\x52\x5d\x6b\x9a\xba\x3a\x9a\x92\x43\xd1\x9d\xd6\x41\x1d\x3a\x6b\x69\x15\xb6\x7b\x73\xac\x5e\xec\xdd\xae\x79\xb5\xa6\xbd\xf7\xd5\xd5\x93\x35\xcf\xaa\x14\xd1\xdd\x8c\xa9\x76\x03\x6e\x1f\xdf\x7c\xa1\x27\x7d\x48\xcc\x57\x6d\xb1\x6e\x9e\xe0\x19\x39\xef\x45\x30\xfa\x7f\x50\x33\xb8\xc0\x57\xee\x77\x7e\x00\x11\xe9\x16\xe7\x34\x85\xf8\xa5\x9b\x0b\x63\xde\x9e\xfd\x47\x35\xa3\x3b\x31\x7c\x29\x5c\x82\xbe\x03\x00\x00\xff\xff\x32\x83\xc0\x1c\x80\x01\x00\x00")

func textUserUserDetailsGotmplBytes() ([]byte, error) {
	return bindataRead(
		_textUserUserDetailsGotmpl,
		"text/user/user-details.gotmpl",
	)
}

func textUserUserDetailsGotmpl() (*asset, error) {
	bytes, err := textUserUserDetailsGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "text/user/user-details.gotmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go":                                 bindataGo,
	"text/allocator/list.gotmpl":                 textAllocatorListGotmpl,
	"text/allocator/listmetadata.gotmpl":         textAllocatorListmetadataGotmpl,
	"text/allocator/show.gotmpl":                 textAllocatorShowGotmpl,
	"text/allocator/showmetadata.gotmpl":         textAllocatorShowmetadataGotmpl,
	"text/apm/list.gotmpl":                       textApmListGotmpl,
	"text/apm/planhistory.gotmpl":                textApmPlanhistoryGotmpl,
	"text/deployment/list.gotmpl":                textDeploymentListGotmpl,
	"text/deployment/notelist.gotmpl":            textDeploymentNotelistGotmpl,
	"text/deployment/search.gotmpl":              textDeploymentSearchGotmpl,
	"text/deployment-template/list.gotmpl":       textDeploymentTemplateListGotmpl,
	"text/elasticsearch/list.gotmpl":             textElasticsearchListGotmpl,
	"text/elasticsearch/overridecapacity.gotmpl": textElasticsearchOverridecapacityGotmpl,
	"text/elasticsearch/planhistory.gotmpl":      textElasticsearchPlanhistoryGotmpl,
	"text/filtered-group/list.gotmpl":            textFilteredGroupListGotmpl,
	"text/instance-configuration/create.gotmpl":  textInstanceConfigurationCreateGotmpl,
	"text/instance-configuration/list.gotmpl":    textInstanceConfigurationListGotmpl,
	"text/kibana/enable.gotmpl":                  textKibanaEnableGotmpl,
	"text/kibana/list.gotmpl":                    textKibanaListGotmpl,
	"text/metadata/show.gotmpl":                  textMetadataShowGotmpl,
	"text/platform/repositorylist.gotmpl":        textPlatformRepositorylistGotmpl,
	"text/proxy/list.gotmpl":                     textProxyListGotmpl,
	"text/roles/list.gotmpl":                     textRolesListGotmpl,
	"text/runner/list.gotmpl":                    textRunnerListGotmpl,
	"text/stack/list.gotmpl":                     textStackListGotmpl,
	"text/token/create.gotmpl":                   textTokenCreateGotmpl,
	"text/token/list.gotmpl":                     textTokenListGotmpl,
	"text/user/key-details.gotmpl":               textUserKeyDetailsGotmpl,
	"text/user/keys-details.gotmpl":              textUserKeysDetailsGotmpl,
	"text/user/list.gotmpl":                      textUserListGotmpl,
	"text/user/user-details.gotmpl":              textUserUserDetailsGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"text": &bintree{nil, map[string]*bintree{
		"allocator": &bintree{nil, map[string]*bintree{
			"list.gotmpl":         &bintree{textAllocatorListGotmpl, map[string]*bintree{}},
			"listmetadata.gotmpl": &bintree{textAllocatorListmetadataGotmpl, map[string]*bintree{}},
			"show.gotmpl":         &bintree{textAllocatorShowGotmpl, map[string]*bintree{}},
			"showmetadata.gotmpl": &bintree{textAllocatorShowmetadataGotmpl, map[string]*bintree{}},
		}},
		"apm": &bintree{nil, map[string]*bintree{
			"list.gotmpl":        &bintree{textApmListGotmpl, map[string]*bintree{}},
			"planhistory.gotmpl": &bintree{textApmPlanhistoryGotmpl, map[string]*bintree{}},
		}},
		"deployment": &bintree{nil, map[string]*bintree{
			"list.gotmpl":     &bintree{textDeploymentListGotmpl, map[string]*bintree{}},
			"notelist.gotmpl": &bintree{textDeploymentNotelistGotmpl, map[string]*bintree{}},
			"search.gotmpl":   &bintree{textDeploymentSearchGotmpl, map[string]*bintree{}},
		}},
		"deployment-template": &bintree{nil, map[string]*bintree{
			"list.gotmpl": &bintree{textDeploymentTemplateListGotmpl, map[string]*bintree{}},
		}},
		"elasticsearch": &bintree{nil, map[string]*bintree{
			"list.gotmpl":             &bintree{textElasticsearchListGotmpl, map[string]*bintree{}},
			"overridecapacity.gotmpl": &bintree{textElasticsearchOverridecapacityGotmpl, map[string]*bintree{}},
			"planhistory.gotmpl":      &bintree{textElasticsearchPlanhistoryGotmpl, map[string]*bintree{}},
		}},
		"filtered-group": &bintree{nil, map[string]*bintree{
			"list.gotmpl": &bintree{textFilteredGroupListGotmpl, map[string]*bintree{}},
		}},
		"instance-configuration": &bintree{nil, map[string]*bintree{
			"create.gotmpl": &bintree{textInstanceConfigurationCreateGotmpl, map[string]*bintree{}},
			"list.gotmpl":   &bintree{textInstanceConfigurationListGotmpl, map[string]*bintree{}},
		}},
		"kibana": &bintree{nil, map[string]*bintree{
			"enable.gotmpl": &bintree{textKibanaEnableGotmpl, map[string]*bintree{}},
			"list.gotmpl":   &bintree{textKibanaListGotmpl, map[string]*bintree{}},
		}},
		"metadata": &bintree{nil, map[string]*bintree{
			"show.gotmpl": &bintree{textMetadataShowGotmpl, map[string]*bintree{}},
		}},
		"platform": &bintree{nil, map[string]*bintree{
			"repositorylist.gotmpl": &bintree{textPlatformRepositorylistGotmpl, map[string]*bintree{}},
		}},
		"proxy": &bintree{nil, map[string]*bintree{
			"list.gotmpl": &bintree{textProxyListGotmpl, map[string]*bintree{}},
		}},
		"roles": &bintree{nil, map[string]*bintree{
			"list.gotmpl": &bintree{textRolesListGotmpl, map[string]*bintree{}},
		}},
		"runner": &bintree{nil, map[string]*bintree{
			"list.gotmpl": &bintree{textRunnerListGotmpl, map[string]*bintree{}},
		}},
		"stack": &bintree{nil, map[string]*bintree{
			"list.gotmpl": &bintree{textStackListGotmpl, map[string]*bintree{}},
		}},
		"token": &bintree{nil, map[string]*bintree{
			"create.gotmpl": &bintree{textTokenCreateGotmpl, map[string]*bintree{}},
			"list.gotmpl":   &bintree{textTokenListGotmpl, map[string]*bintree{}},
		}},
		"user": &bintree{nil, map[string]*bintree{
			"key-details.gotmpl":  &bintree{textUserKeyDetailsGotmpl, map[string]*bintree{}},
			"keys-details.gotmpl": &bintree{textUserKeysDetailsGotmpl, map[string]*bintree{}},
			"list.gotmpl":         &bintree{textUserListGotmpl, map[string]*bintree{}},
			"user-details.gotmpl": &bintree{textUserUserDetailsGotmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
